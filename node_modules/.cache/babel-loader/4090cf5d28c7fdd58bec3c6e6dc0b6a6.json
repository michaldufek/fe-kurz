{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js!/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/BacktestPatterns.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/BacktestPatterns.vue","mtime":1587025922792},{"path":"/home/dufek/Documents/gitlab/frs-apps/.babelrc","mtime":1576496397055},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BacktestPatterns.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n\r\n    <div class=\"col-xl-12 col-12 col-md-6 container\" style=\"\">\r\n      <assets-patterns-picker :title=\"$t('research.patternLab.backtestPatterns.title')\"\r\n                              :btnText=\"$t('research.patternLab.backtestPatterns.addPattern')\" \r\n                              @btnClicked=\"addPattern\" />\r\n    </div>\r\n\r\n    <!-- strategy settings  -->\r\n    <div class=\"col-md-6 container col-12 col-xl-4\">\r\n      <card>\r\n        <!-- initial capital -->\r\n        <div>\r\n          <p class=\"label\">{{ $t('research.patternLab.backtestPatterns.initialCapital') }}</p>\r\n          <base-input alternative\r\n                      type=\"text\"\r\n                      class=\"input\"\r\n                      style=\"\"\r\n                      v-model=\"strategy.initialCapital\"\r\n                      :placeholder=\"$t('research.patternLab.backtestPatterns.numberUSD')\">\r\n          </base-input>\r\n        </div>    \r\n\r\n        <!-- entry rules -->\r\n        <div style=\"clear:both;\">\r\n          <h4 slot=\"header\" class=\"card-title\">{{ $t('research.patternLab.entry') + ' ' + $t('research.patternLab.rules') }}</h4>        \r\n\r\n          <table>\r\n            <!-- direction -->\r\n            <tr>\r\n              <td>\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.direction') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-dropdown menu-classes=\"dropdown-black\" \r\n                              title-classes=\"btn btn-secondary\"\r\n                              :title=\"strategy.direction\">\r\n                  <ul style=\"list-style-type: none;\">\r\n                    <li v-for=\"dir in Object.values($t('research.patternLab.backtestPatterns.entryRules.directions')).filter(d => d !== strategy.direction)\">            \r\n                      <a class=\"dropdown-item\" \r\n                        @click=\"strategy.direction = dir\" \r\n                        href=\"#\">\r\n                        {{ dir }}\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </base-dropdown>\r\n              </td>\r\n            </tr>\r\n\r\n            <!-- trend filter -->\r\n            <tr :title=\"$t('research.patternLab.backtestPatterns.entryRules.trendFilterTip')\">\r\n              <td style=\"width: 46%\">\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.trendFilter') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-checkbox v-model=\"strategy.trendFilter\" style=\"margin-top: -20px; margin-bottom: 10px; text-align: center;\" />\r\n              </td>\r\n            </tr>\r\n\r\n            <!-- moving average -->\r\n            <tr v-if=\"strategy.trendFilter\" :title=\"$t('research.patternLab.backtestPatterns.entryRules.movingAverageTip')\">\r\n              <td>\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.ma_filter_period') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-input alternative\r\n                            type=\"text\"\r\n                            v-model=\"strategy.ma_filter_period\"\r\n                            :placeholder=\"$t('research.patternLab.backtestPatterns.numberUSD')\">\r\n                </base-input>\r\n              </td>\r\n            </tr>\r\n            \r\n            <!-- risk (fix-amount) -->\r\n            <tr>\r\n              <td>\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.fixed_amount') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-input alternative\r\n                        type=\"text\"\r\n                        v-model=\"strategy.fixed_amount\"\r\n                        :placeholder=\"$t('research.patternLab.backtestPatterns.numberUSD')\">\r\n                </base-input>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n          \r\n        </div>\r\n\r\n        <!-- exit rules -->\r\n        <div>\r\n          <h4 slot=\"header\" class=\"card-title\">{{ $t('research.patternLab.exit') + ' ' + $t('research.patternLab.rules') }}</h4>\r\n\r\n          <!-- analyze -->\r\n          <div :title=\"$t('research.patternLab.backtestPatterns.exitRules.analyzeTip')\">\r\n            <p class=\"label\" style=\"width: 34%\">{{ $t('research.patternLab.backtestPatterns.exitRules.analyze') }}</p>\r\n            <base-input alternative\r\n                        type=\"text\"\r\n                        class=\"input\"\r\n                        style=\"width: 40%\"\r\n                        v-model=\"strategy.analyze\"\r\n                        :placeholder=\"$t('research.patternLab.backtestPatterns.exitRules.numberBars')\">\r\n            </base-input>\r\n          </div>\r\n\r\n          <table>\r\n            <!-- profit target -->\r\n            <tr>\r\n              <td colspan=\"2\">\r\n                <p class=\"label\">{{ $t('research.patternLab.backtestPatterns.exitRules.profit_take') }}</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <base-input alternative\r\n                          type=\"text\"                        \r\n                          v-model=\"strategy.profit_take.value\"\r\n                          :placeholder=\"$t('number')\">\r\n                </base-input>\r\n              </td>\r\n              <td>\r\n                <base-dropdown menu-classes=\"dropdown-black\" \r\n                            title-classes=\"btn btn-secondary\"\r\n                            :title=\"strategy.profit_take.unit\">\r\n                  <ul style=\"list-style-type: none;\">\r\n                    <li v-for=\"unit in $t('research.patternLab.units').filter(u => u !== strategy.profit_take.unit)\">\r\n                      <a class=\"dropdown-item\" \r\n                        @click=\"strategy.profit_take.unit = unit\" \r\n                        href=\"#\">\r\n                        {{ unit }}\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </base-dropdown>\r\n              </td>\r\n            </tr>\r\n\r\n            <!-- stop loss -->\r\n            <tr>\r\n              <td colspan=\"2\">\r\n                <p class=\"label\">{{ $t('research.patternLab.backtestPatterns.exitRules.stoploss') }}</p>\r\n              </td>\r\n\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <base-input alternative\r\n                          type=\"text\"\r\n                          v-model=\"strategy.stoploss.value\"\r\n                          :placeholder=\"$t('number')\">\r\n                </base-input>\r\n              </td>\r\n              <td>\r\n                <base-dropdown menu-classes=\"dropdown-black\" \r\n                            title-classes=\"btn btn-secondary\"\r\n                            :title=\"strategy.stoploss.unit\">\r\n                  <ul style=\"list-style-type: none;\">\r\n                    <li v-for=\"unit in $t('research.patternLab.units').filter(u => u !== strategy.stoploss.unit)\">\r\n                      <a class=\"dropdown-item\" \r\n                        @click=\"strategy.stoploss.unit = unit\" \r\n                        href=\"#\">\r\n                        {{ unit }}\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </base-dropdown>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n\r\n        </div>\r\n\r\n        <!-- Run strategy button -->\r\n        <base-button native-type=\"submit\" type=\"secondary\" @click=\"runStrategyClick\" style=\"width: 100%\">{{ $t('research.patternLab.backtestPatterns.runStrategy') }}</base-button>\r\n\r\n      </card>\r\n    </div>\r\n    \r\n    <!-- performance results  -->\r\n    <card class=\"col-xl-8 col-md-12  container \" :key=\"cardKey\">\r\n      <h4 slot=\"header\" class=\"card-title\" style=\"float: left\">{{ $t('research.patternLab.backtestPatterns.performanceResults.title') }}</h4>\r\n\r\n      <top-navbar />\r\n      <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"[loading ? dataClass : noDataClass, loaderClass]\"/>\r\n      <dashboard-content @click.native=\"toggleSidebar\" style=\"margin-top: 15px\" />\r\n    </card>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\n  import AssetsPatternsPicker from '@/custom/components/AssetsPatternsPicker'\r\n  import constants from '@/custom/assets/js/constants'\r\n  import helper from '@/custom/assets/js/helper';\r\n  import i18n from \"@/i18n\"\r\n  \r\n  import TopNavbar from \"@/custom/layout/application/patternLab/performanceResults/TopNavbar.vue\";\r\n  import DashboardContent from \"@/custom/layout/application/patternLab/Content.vue\";\r\n  import MobileMenu from \"@/layout/dashboard/MobileMenu\";\r\n  import DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\n\r\n  \r\n  const defaultStrategy = {\r\n    initialCapital: null,\r\n\r\n    // entry rules\r\n    trendFilter: false,\r\n    ma_filter_period: null,\r\n    fixed_amount: null,\r\n    \r\n    // exit rules\r\n    analyze: null,\r\n    profit_take: {\r\n      value: null,\r\n      unit: constants.defaultUnit\r\n    },\r\n    stoploss: {\r\n      value: null,\r\n      unit: constants.defaultUnit\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    components: {\r\n      AssetsPatternsPicker,\r\n      TopNavbar,\r\n      DashboardContent,\r\n      MobileMenu,\r\n      DualRingLoader\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        errorTitle: ' (' + this.$t('research.patternLab.backtestPatterns.title') + ').',\r\n        columns: this.$t(constants.translationKeys.patterns + '.columns'),\r\n\r\n        strategy: {\r\n          ...defaultStrategy,\r\n          direction: Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions'))[0]\r\n        },\r\n        loading: false,\r\n        cardKey: 0,\r\n\r\n        // css classes\r\n        dataClass: 'data',      \r\n        noDataClass: 'noData',\r\n        loaderClass: 'loader',\r\n      }\r\n    },\r\n    \r\n    methods: {\r\n      initData() {\r\n        let data = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n        if (data) {\r\n          this.loading = data.loading ? data.loading : false\r\n          if (this.loading) {\r\n            this.setCheckBacktestsInterval()\r\n          }\r\n\r\n          if (data.strategy) {\r\n            this.strategy = data.strategy\r\n            this.strategy.direction = Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions'))[data.strategy.direction]\r\n          } else {\r\n            this.strategy = {\r\n              ...defaultStrategy,\r\n              direction: Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions'))[0]\r\n            }            \r\n          }\r\n        }\r\n      },\r\n\r\n      setCheckBacktestsInterval() {\r\n        let interval = setInterval(() => { \r\n          this.checkBacktests(interval)\r\n        }, constants.intervals.backtestsDone )        \r\n      },\r\n      checkBacktests(interval) {\r\n        let backtestsDone = true\r\n        let noResp = true\r\n\r\n        this.$http\r\n        .get(constants.urls.patternLab.backtestPatterns.status)\r\n        .then(response => {\r\n          response.data.forEach(bt => {\r\n            noResp = false\r\n            if (!bt.done) {\r\n              backtestsDone = false\r\n            }\r\n          })\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n          }\r\n        })\r\n        .finally(() => {\r\n          if (backtestsDone && !noResp) {\r\n              let bpData = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n              if (bpData) {\r\n                // set bt id and name\r\n                let bts = helper.getStoredBacktests(bpData)\r\n\r\n                this.$http\r\n                .get(constants.urls.patternLab.backtestPatterns.results)\r\n                .then(response => {\r\n                  bts.forEach(bt => {   // we have ids so change backtests names to 'bt_name (bt_id)' form\r\n                    bt.set('btId', response.data.filter(datum => datum.ticker === bt.get('assetId') && datum.pattern === bt.get('patternId'))[0].id)\r\n                    bt.set(this.columns[0].toLowerCase(), `${bt.get(this.columns[0].toLowerCase()) && !this.isDefaultPrName(bt.get(this.columns[0].toLowerCase())) \r\n                                                        ? bt.get(this.columns[0].toLowerCase()).split(' (')[0] \r\n                                                        : helper.getDefaultPrName(bt.get('btId'))} (${bt.get('btId')})`)    // Name\r\n                  })\r\n\r\n                  helper.updateStoreBacktests(this.$store, 'backtests', bts, constants.storeKeys.backtestPatterns)\r\n                  helper.updateStore(this.$store, 'allowSave', true, constants.storeKeys.backtestPatterns)\r\n                })\r\n                .catch(error => {\r\n                  console.log(error);\r\n\r\n                  if (error.message === constants.strings.networkError) {\r\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n                  }\r\n                })\r\n                .finally(() => {\r\n                  this.loading = false\r\n                  clearInterval(interval)\r\n                  this.cardKey++\r\n                })\r\n              }\r\n          }\r\n        })\r\n      },\r\n      isDefaultPrName(name) {\r\n        let nameSplitted = name.split('_')\r\n        if (nameSplitted.length < 2) {\r\n          return false\r\n        }\r\n        let splitted = nameSplitted[1].split(' (')\r\n        if (splitted.length < 2) {\r\n          return false\r\n        }\r\n        return splitted[0] === splitted[1].split(')')[0]\r\n      },\r\n\r\n      // methods from AssetsPatternsPicker emits\r\n      addPattern() {\r\n        if (!this.strategy.initialCapital) {\r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.noInitialCapital') + this.errorTitle\r\n                      })\r\n          return false\r\n        }\r\n\r\n        if (this.loading) {\r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.loading') + this.errorTitle\r\n                      })\r\n          return false\r\n        }\r\n\r\n        let data = helper.getAssetsPatternsPickerData(this.$store)\r\n        if (!data || !data.checkedPatterns.length) {   \r\n          return false\r\n        }\r\n\r\n        this.setBacktestsTable(true)\r\n\r\n        helper.updateStore(this.$store, 'savedBacktestsIDs', [], constants.storeKeys.backtestPatterns)\r\n        helper.updateStore(this.$store, 'unsavedBacktestsIDs', [], constants.storeKeys.backtestPatterns)\r\n        helper.updateStore(this.$store, 'allowSave', false, constants.storeKeys.backtestPatterns)\r\n\r\n        this.cardKey++\r\n\r\n        return true\r\n      },\r\n\r\n      runStrategyClick() {\r\n        let data = helper.getAssetsPatternsPickerData(this.$store)\r\n        if (!data || !data.checkedAssets.length) {   \r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.addNoAsset') + this.errorTitle\r\n                      })\r\n          return\r\n        }\r\n        \r\n        if (this.loading) {\r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.loading') + this.errorTitle\r\n                      })\r\n          return \r\n        }\r\n\r\n        if (data && !data.checkedPatterns.length) {\r\n          this.$notify({\r\n              type: 'warning', \r\n              message: this.$t('notifications.addNoPattern') + this.errorTitle\r\n          })  \r\n          return\r\n        } \r\n\r\n        let canRun = true\r\n        let btsData = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n        if (!btsData || (btsData && (btsData.backtests === undefined || btsData.backtests === []))) {\r\n          canRun = this.addPattern()\r\n        } \r\n\r\n        if (canRun) {        \r\n          this.setBacktestsTable()\r\n          this.cardKey++\r\n          this.runBacktests()     \r\n        }\r\n      },\r\n\r\n      setBacktestsTable(createNew=false) {\r\n        let assetsPatterns = helper.getAssetsPatternsPickerData(this.$store)\r\n        let bpData = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n        let oldTableData = []\r\n        if (bpData) {\r\n            oldTableData = helper.getStoredBacktests(bpData)\r\n        }\r\n        let newTableData = oldTableData\r\n\r\n        if (createNew) {\r\n          if (assetsPatterns) {\r\n            // create new rows\r\n            newTableData = []\r\n\r\n            assetsPatterns.checkedAssets.forEach(asset => {\r\n                assetsPatterns.checkedPatterns.forEach(pattern => {\r\n                    let row = new Map()     // order of properties is guaranteed so we can store only (language independent) values\r\n                    let clNr = 0\r\n\r\n                    row.set('btId', -1)\r\n                    row.set('assetId', asset.id)\r\n                    row.set('patternId', pattern.id)\r\n                    row.set(this.columns[clNr++].toLowerCase(), null)    // Name\r\n                    row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.range && assetsPatterns.range.from \r\n                                                                ? helper.formatDate(helper.formatDateOnly(assetsPatterns.range.from))\r\n                                                                : null)    // From\r\n                    row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.range && assetsPatterns.range.to\r\n                                                                ? helper.formatDate(helper.formatDateOnly(assetsPatterns.range.to))\r\n                                                                : null)    // To\r\n                    row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.timeframe)    // Time frame                    \r\n                    row.set(this.columns[clNr++].toLowerCase(), asset.symbol)    // Asset                    \r\n                    row.set(this.columns[clNr++].toLowerCase(), pattern.name)    // Pattern\r\n\r\n                    if (this.strategy) {   \r\n                        this.updateRow(row, clNr)                            \r\n                    }                                 \r\n\r\n                    newTableData.push(row)\r\n                })\r\n            })\r\n          }\r\n        } else {\r\n            newTableData.forEach(row => {\r\n                let clNr = 4    // starting from Asset column (for the if)\r\n\r\n                if (assetsPatterns.range && !assetsPatterns.range.to) {\r\n                    // set null To dates to today\r\n                    row.set(this.columns[clNr-2].toLowerCase(), helper.formatDate(new Date())) // To\r\n                }\r\n            })\r\n        }\r\n\r\n        helper.updateStoreBacktests(this.$store, 'backtests', newTableData, constants.storeKeys.backtestPatterns) \r\n      },\r\n      updateRow(row, clNr) {\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.initialCapital ? `${this.strategy.initialCapital} ${constants.defaultUnit}` : null)    // Initial capital\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.analyze ? `${this.strategy.analyze} ${helper.pluralize(this.strategy.analyze, constants.translationKeys.patterns + '.bar')}` : null)    // Analyze\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.profit_take.value ? `${this.strategy.profit_take.value} ${this.strategy.profit_take.unit}` : null)    // Profit Target\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.stoploss.value ? `${this.strategy.stoploss.value} ${this.strategy.stoploss.unit}` : null)    // Stop Loss\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.trendFilter && this.strategy.ma_filter_period ? `${this.strategy.ma_filter_period} ${constants.defaultUnit}` : null)    // Trend filter (moving average)\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.direction)    // Direction\r\n        row.set('fixed_amount', this.strategy.fixed_amount)    // Risk\r\n      },\r\n\r\n      runBacktests() { \r\n        this.loading = true\r\n        let backtestsAll = helper.getStoredBacktests(this.$store.getItem(constants.storeKeys.backtestPatterns))\r\n\r\n        // run all backtests showed in Patterns table\r\n        let backtests2Run = []\r\n        backtestsAll.forEach(bt => backtests2Run.push(helper.mapStrategyFromRow(bt)))\r\n\r\n        this.$http\r\n        .post(constants.urls.patternLab.backtestPatterns.results, backtests2Run)\r\n        .then(_ => this.setCheckBacktestsInterval())\r\n        .catch(error => {\r\n          this.loading = false\r\n          console.log(error);\r\n\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n          } else {\r\n            this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.couldntRunBacktests') + this.errorTitle\r\n                        })\r\n          }\r\n        })        \r\n      },\r\n\r\n      toggleSidebar() {\r\n        if (this.$sidebar.showSidebar) {\r\n          this.$sidebar.displaySidebar(false);\r\n        }\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.initData()     \r\n      this.cardKey++\r\n    },\r\n\r\n    watch: {\r\n      loading(val) {\r\n        helper.updateStore(this.$store, 'loading', val, constants.storeKeys.backtestPatterns) \r\n      },\r\n      strategy: {\r\n        handler(val){\r\n          let val2store = JSON.parse(JSON.stringify(val))\r\n          val2store.direction = Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions')).indexOf(val.direction)\r\n          helper.updateStore(this.$store, 'strategy', val2store, constants.storeKeys.backtestPatterns) \r\n        },\r\n        deep: true\r\n      }\r\n    }\r\n  }  \r\n</script>\r\n<style>\r\n.label {\r\n  float: left;\r\n  width: 40%;\r\n  padding-top: 5px;\r\n}\r\n\r\n.input {\r\n  float: left;\r\n  width: 60%;\r\n}\r\n\r\n.loader {\r\n  width: 80px; \r\n  height: 80px;  \r\n  position: absolute; \r\n}\r\n\r\n.loader.noData {\r\n  top: 20%; \r\n  left: 40%;    \r\n}\r\n\r\n.loader.data {\r\n  top: 40%; \r\n  left: 42.5%;\r\n}\r\n</style>"],"sourceRoot":"src/custom/apps/research/patternLab"}]}