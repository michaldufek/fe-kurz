{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js!/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/performanceResults/Patterns.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/performanceResults/Patterns.vue","mtime":1587025922792},{"path":"/home/dufek/Documents/gitlab/frs-apps/.babelrc","mtime":1576496397055},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Patterns.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n\n        <fancy-table :title=\"$t(patternsKey + '.title')\"\n                     :showTitle=\"false\"\n                     :data=\"tableData\"\n                     :columns=\"columns\"\n                     :editable=\"true\"\n                     :saveable=\"true\"\n                     :allowSave=\"allowSave\"\n                     :savedRows=\"savedRows\"\n                     @edited=\"edited\" \n                     @saved=\"saved\" \n                     :key=\"tableKey\" />\n\n</template>\n<script>\nimport FancyTable from '@/custom/components/Tables/FancyTable';  \nimport constants from '@/custom/assets/js/constants'\nimport helper from '@/custom/assets/js/helper';\n\n\nexport default {\n    components: {\n        FancyTable\n    },\n\n    data() {\n        return {\n            patternsKey: constants.translationKeys.patterns,\n\n            tableData: null,\n            columns: this.$t(constants.translationKeys.patterns + '.columns'),\n            allowSave: false,\n            savedRows: [],\n\n            tableKey: 0\n        }\n    },\n\n    methods: {\n        initData() { \n            let backtestsIDs = []\n            let unsavedBacktestsIDs = []\n\n            // get data from store\n            let data = this.$store.getItem(constants.storeKeys.backtestPatterns)\n            if (data) {\n                this.tableData = helper.getStoredBacktests(data)\n                this.allowSave = data.allowSave\n                backtestsIDs = this.tableData.map(bt => bt.get('btId'))\n                unsavedBacktestsIDs = data.unsavedBacktestsIDs\n            }\n            \n            // get data from server\n            this.$http\n            .get(constants.urls.datawarehouse.results)\n            .then(response => { \n                response.data.forEach(datum => {\n                    if (backtestsIDs.includes(datum.original_result_id) && !unsavedBacktestsIDs.includes(datum.original_result_id)) {\n                        this.savedRows.push(datum.original_result_id)\n                    }\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                if (error.message === constants.strings.networkError) {\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t(this.patternsKey + '.title'))\n                }\n            })\n            .finally(_ => {})\n        },        \n\n        // FancyTable emited event\n        edited(data) {\n            // check if new value is valid\n            let assetsPatterns = helper.getAssetsPatternsPickerData(this.$store)\n            let clNr = 0\n            let btId = this.tableData[data.position[0]].get('btId')\n\n            switch(data.position[1]) {\n                case this.columns[clNr++]:  // Name                    \n                    data.value = data.value + (btId && btId !== -1 ? ` (${btId})` : '')\n                    break\n                case this.columns[clNr++]:   // From\n                case this.columns[clNr++]:   // To\n                    if (isNaN(new Date(data.value).getMonth())) {\n                        return\n                    }\n                    break;\n                case this.columns[clNr++]:   // Time frame\n                    if (helper.convertTimeframe(data.value) === -1) {\n                        return\n                    }\n                    break\n                case this.columns[clNr++]:   // Asset\n                    if (!assetsPatterns.selectedAssets.map(sa => sa.symbol).includes(data.value)) {\n                        return\n                    }\n                    break\n                case this.columns[clNr++]:   // Pattern\n                    if (!assetsPatterns.selectedPatterns.map(sa => sa.name).includes(data.value)) {\n                        return\n                    }\n                    break\n                case this.columns[clNr++]:   // Initial capital\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    data.value = `${data.value} ${constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Analyze\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    data.value = `${data.value} ${helper.pluralize(data.value, constants.translationKeys.patterns + '.bar')}`\n                    break\n                case this.columns[clNr++]:   // Profit Target\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    let unit = this.tableData[data.position[0]].get(this.columns[clNr-1].toLowerCase())\n                    let unitSplitted = unit ? unit.split(' ') : []\n                    data.value = `${data.value} ${unitSplitted.length ? unitSplitted[1] : constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Stop Loss\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    unit = this.tableData[data.position[0]].get(this.columns[clNr-1].toLowerCase())\n                    unitSplitted = unit ? unit.split(' ') : []\n                    data.value = `${data.value} ${unitSplitted.length ? unitSplitted[1] : constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Trend filter (moving average)\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    data.value = `${data.value} ${constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Direction\n                    if (!Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions')).includes(data.value)) {\n                        return\n                    }\n                    break\n                default:\n                    return\n            }\n\n            this.tableData[data.position[0]].set(data.position[1].toLowerCase(), data.value)   // write edited/changed value to the table\n            helper.updateStoreBacktests(this.$store, 'backtests', this.tableData, constants.storeKeys.backtestPatterns)            \n\n            this.savedRows.splice(this.savedRows.indexOf(btId), 1)  // remove from savedRows\n            helper.updateStore(this.$store, 'unsavedBacktestsIDs', this.$store.getItem(constants.storeKeys.backtestPatterns).unsavedBacktestsIDs.concat([ btId ]), constants.storeKeys.backtestPatterns)\n\n            this.tableKey++\n        },\n\n        saved(row) {\n            this.loading = true\n\n            // change saved to true\n            this.$http\n            .patch(constants.urls.patternLab.backtestPatterns.results + '/' + row.btId, { ...helper.mapStrategyFromRow(row, false), saved: true })\n            .then(_ => { \n                this.savedRows.push(row.btId) \n                let unsavedBacktestsIDs = this.$store.getItem(constants.storeKeys.backtestPatterns).unsavedBacktestsIDs\n                unsavedBacktestsIDs.splice(unsavedBacktestsIDs.indexOf(row.btId), 1)  // remove from unsavedBacktestsIDs\n                helper.updateStore(this.$store, 'unsavedBacktestsIDs', unsavedBacktestsIDs, constants.storeKeys.backtestPatterns) \n\n                // change name of previously stored bt\n                this.$http\n                .patch(constants.urls.datawarehouse.result + helper.encodeRouteParams([ row.btId, constants.urls.patternLab.abbreviation ]), { name: row[this.columns[0].toLowerCase()] })\n                .catch(error => {\n                    console.log(error)\n                    if (error.message === constants.strings.networkError) {\n                        helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.patternsKey + '.title')} ${this.$t('research.saveName')}`)\n                    }\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                if (error.message === constants.strings.networkError) {\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.patternsKey + '.title')} ${this.$t('research.save')}`)\n                }\n            })\n            .finally(() => this.loading = false)\n        }\n    },\n\n    mounted() {\n        this.initData()\n    },\n\n    watch: {\n      savedRows: {\n        handler(val){\n          helper.updateStore(this.$store, 'savedBacktestsIDs', val, constants.storeKeys.backtestPatterns) \n        },\n        deep: true\n      }\n    }\n}\n</script>\n<style scoped>\n</style>"],"sourceRoot":"src/custom/apps/research/patternLab/performanceResults"}]}