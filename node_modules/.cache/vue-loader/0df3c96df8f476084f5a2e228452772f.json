{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/PatternStatistics.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/PatternStatistics.vue","mtime":1593584406300},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnRhYmxlID4gdGhlYWQgPiB0ciA+IHRoIHsKICBmb250LXNpemU6IGluaGVyaXQKfQo="},{"version":3,"sources":["PatternStatistics.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+VA;AACA;AACA","file":"PatternStatistics.vue","sourceRoot":"src/custom/apps/research/patternLab","sourcesContent":["<template>\r\n  <div>\r\n    <audio id=\"connectionLost\" src=\"media/connectionLost.mp3\" preload=\"auto\"></audio>\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-3 col-md-12 container\">\r\n        <!-- statistics -->\r\n        <fancy-card :title=\"$t(storeKey + '.title') + ' - ' + $t(storeKey + '.statistics.title')\"\r\n                    :fullTitle=\"$t(storeKey + '.statistics.title')\"\r\n                    :showTitle=\"true\"\r\n                    :items=\"$t(storeKey + '.statistics.items')\"                    \r\n                    :values=\"[ patternsStats.total, patternsStats.bullish, patternsStats.bearish ]\"\r\n                    style=\"margin-bottom: 0px;\"\r\n                    :key=\"cardKey\">\r\n        </fancy-card>\r\n\r\n        <!-- pie charts -->\r\n        <div style=\"position: relative; left: 10%; top: 50px; z-index: 1\">\r\n          <base-dropdown class=\"dd\" \r\n                         menu-classes=\"dropdown-black\" \r\n                         title-classes=\"btn btn-secondary\"\r\n                         :title=\"selectedAsset ? selectedAsset.symbol : null\"\r\n                         style=\"width: 20%\">\r\n            <ul style=\"list-style-type: none;\">\r\n              <li v-for=\"asset in (selectedAsset ? assets.filter(a => a.id !== selectedAsset.id) : assets)\">            \r\n                <a class=\"dropdown-item\" \r\n                   @click=\"selectAsset(asset)\" \r\n                   href=\"#\">\r\n                  {{ asset.symbol }}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </base-dropdown>\r\n        </div>\r\n        <pie-chart-card :title=\"$t(storeKey + '.title') + ' - ' + $t(storeKey + '.patternsByStock')\"\r\n                        :chartData=\"chartData.patternsByAsset\" />\r\n\r\n        <div style=\"position: relative; left: 10%; top: 50px; z-index: 1\">\r\n          <base-dropdown class=\"dd\" \r\n                         menu-classes=\"dropdown-black\" \r\n                         title-classes=\"btn btn-secondary\"\r\n                         :title=\"selectedPattern ? selectedPattern.name : null\"\r\n                         style=\"width: 20%\">\r\n            <ul style=\"list-style-type: none;\">\r\n              <li v-for=\"pattern in (selectedPattern ? patterns.filter(p => p.id !== selectedPattern.id) : patterns)\">            \r\n                <a class=\"dropdown-item\" \r\n                   @click=\"selectPattern(pattern)\" \r\n                   href=\"#\">\r\n                  {{ pattern.name }}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </base-dropdown>\r\n        </div>\r\n        <pie-chart-card :title=\"$t(storeKey + '.title') + ' - ' + $t(storeKey + '.stocksByPattern')\"\r\n                        :chartData=\"chartData.assetsByPattern\" />\r\n      </div>\r\n\r\n      <!-- patterns table -->\r\n      <div class=\"col-lg-9 col-md-12\">\r\n        <fancy-table :title=\"$t(storeKey + '.patternsTable.title')\"\r\n                     :showTitle=\"false\"\r\n                     :apiUrls=\"patternsUrl\"\r\n                     :columns=\"columns\"\r\n                     :rowsCreator=\"rowsCreator\"\r\n                     :sortable=\"true\"\r\n                     :filterable=\"true\"\r\n                     :key=\"tableKey\"\r\n                     @filtered=\"filtered\">\r\n        </fancy-table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\n  import FancyTable from '@/custom/components/Tables/FancyTable';  \r\n  import FancyCard from '@/custom/components/Cards/FancyCard';  \r\n  import OhlcChart from '@/custom/components/Charts/OhlcChart';\r\n  import PieChartCard from '@/custom/components/Cards/PieChartCard'\r\n\r\n  import constants from '@/custom/assets/js/constants';\r\n  import helper from '@/custom/assets/js/helper';\r\n\r\n  const sKey = 'research.patternLab.patternStatistics'\r\n\r\n\r\n  export default {\r\n    components: {  \r\n      FancyTable,\r\n      FancyCard,\r\n      OhlcChart,\r\n      PieChartCard\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        storeKey: sKey,\r\n        columns: this.$t(sKey + '.patternsTable.columns'),\r\n\r\n        // statistics card\r\n        patternsStats: {\r\n          total: 0,\r\n          bullish: 0,\r\n          bearish: 0\r\n        },\r\n        cardKey: 0,\r\n\r\n        // pie charts\r\n        selectedAsset: null,\r\n        assets: [],\r\n        selectedPattern: null,\r\n        patterns: [],\r\n        timeframe: this.$t('research.patternLab.timeframes')[0],\r\n        chartData: {\r\n          // only chosen asset and pattern\r\n          patternsByAsset: null,\r\n          assetsByPattern: null \r\n        },\r\n        // all assets and patterns\r\n        patternsByAsset: {},\r\n        assetsByPattern: {},\r\n        // initPieChartsLock: false,\r\n\r\n        // patterns table\r\n        patternsUrl: [],\r\n        tableKey: 0\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      // initialization\r\n      initData() {\r\n        let data = helper.getAssetsPatternsPickerData(this.$store)\r\n        if (data) {\r\n          this.timeframe = data.timeframe\r\n          this.patternsUrl = helper.getPatternLabHistoryUrl(data.selectedAssets, data.checkedPatterns, this.timeframe)\r\n          this.tableKey++ // force reload of fancy-table component\r\n\r\n          this.initPieCharts()\r\n        }        \r\n      },\r\n      initPieCharts(column=null, filter=null) {\r\n        if (this.patternsUrl) {\r\n          let datas = []          \r\n          this.$http\r\n          .get(this.patternsUrl)\r\n          .then(response => response.data.forEach(datum => {\r\n              if (datum.count && (!column || (column && String(this.getColumnValue(column, datum)).toLowerCase().includes(filter.toLowerCase())))) {\r\n                datas.push(datum)\r\n              }\r\n          }))\r\n          .catch(error => {\r\n            console.log(error)\r\n            if (error.message === constants.strings.networkError) {\r\n              helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.$t('sidebar.patternLab') + ' ' + this.$t(this.storeKey + '.title') + ')')\r\n            }\r\n          })\r\n          .finally(() => {\r\n            this.assets = []\r\n            this.patterns = []\r\n            this.patternsStats = {  // doing it in finally because of emmited events based concurrency\r\n              total: 0,\r\n              bullish: 0,\r\n              bearish: 0\r\n            }\r\n            this.patternsByAsset = {} \r\n            this.assetsByPattern = {} \r\n\r\n            datas.forEach(datum => {\r\n              this.updateAssetsPatterns(datum)\r\n              this.updatePatternsStats(this.getDirection(datum.signal_set), datum.count)\r\n              this.updateChartDatas(datum)\r\n            }) \r\n            this.initSelectedAssetPattern()     \r\n\r\n            // creating pie charts data\r\n            this.createChartDatas()\r\n            // force reload of fancy-card component\r\n            this.cardKey++\r\n          })\r\n        }\r\n      },\r\n      initSelectedAssetPattern() {\r\n        // setting valid value of selected asset and pattern\r\n        let data = this.$store.getItem(this.storeKey)\r\n\r\n        this.selectedAsset = this.initSelectedItem(this.selectedAsset, this.assets)\r\n        this.selectedPattern = this.initSelectedItem(this.selectedPattern ? this.selectedPattern : data ? data.selectedPattern : null, this.patterns)\r\n      },\r\n      initSelectedItem(selectedCandidate, items) {\r\n        if (selectedCandidate && items.includes(selectedCandidate)) {\r\n          return selectedCandidate\r\n        } else if (items.length) {\r\n          return items[0]\r\n        }        \r\n        return null\r\n      },\r\n\r\n      // emit event\r\n      filtered(data) {\r\n        this.initPieCharts(data.column, data.filter)\r\n      },\r\n\r\n      // table rows creator\r\n      rowsCreator(responseData) { \r\n        let rows = []     \r\n\r\n        responseData.forEach(data => {\r\n          if (data.count) {\r\n            let row = []\r\n            this.createRow(data, row)\r\n            rows.push(row)          \r\n          }\r\n        })\r\n\r\n        return rows\r\n      },\r\n      createRow(data, row) {\r\n        row.push(data.history.ticker.symbol) // Asset\r\n        row.push(data.pattern.name) // Pattern\r\n        row.push(data.count) // # of occurence          \r\n        row.push(data.signal_set.length) // Pattern length\r\n\r\n        let direction = this.getDirection(data.signal_set)       \r\n        row.push(direction) // Direction\r\n\r\n        row.push(data.count_mean ? 1 / data.count_mean : null) // Average frequency\r\n\r\n        if (direction === constants.strings.bullish) {\r\n          row.push(data.d1_bull_up + ' %')  // 1 day up_down\r\n          row.push(data.d5_bull_up + ' %')  // 5 days up_down\r\n          row.push(data.d10_bull_up + ' %') // 10 days up_down\r\n        } else if (direction === constants.strings.bearish) {\r\n          row.push(data.d1_bear_down + ' %')\r\n          row.push(data.d5_bear_down + ' %')\r\n          row.push(data.d10_bear_down + ' %')\r\n        }\r\n      },\r\n      getDirection(signal_set) {\r\n        let directionNr = 0\r\n        signal_set.forEach(signal => directionNr += signal.direction) // to-do: how to calculate overall direction?\r\n\r\n        return helper.convertDirection(directionNr)\r\n      },\r\n\r\n      getColumnValue(column, data) {\r\n        let clNr = 0\r\n\r\n        switch (column) {\r\n          case this.columns[clNr++]:\r\n            return data.history.ticker.symbol // Asset\r\n          case this.columns[clNr++]:\r\n            return data.pattern.name          // Pattern\r\n          case this.columns[clNr++]:\r\n            return data.count                 // # of occurence          \r\n          case this.columns[clNr++]:\r\n            return data.signal_set.length    // Pattern length\r\n          case this.columns[clNr++]:\r\n            let direction = this.getDirection(data.signal_set)       \r\n            return direction                  // Direction\r\n          case this.columns[clNr++]:\r\n            return data.count_mean ? 1 / data.count_mean : null // Average frequency\r\n          case this.columns[clNr++]:\r\n            return direction === constants.strings.bullish ? data.d1_bull_up + ' %' : data.d1_bear_down + ' %'  // 1 day up_down\r\n          case this.columns[clNr++]:\r\n            return direction === constants.strings.bullish ? data.d5_bull_up + ' %' : data.d5_bear_down + ' %'  // 5 days up_down\r\n          case this.columns[clNr++]:\r\n            return direction === constants.strings.bullish ? data.d10_bull_up + ' %' : data.d10_bear_down + ' %'  // 10 days up_down\r\n        }\r\n      },\r\n\r\n      // chart & stats methods\r\n      updateAssetsPatterns(datum) {\r\n        let asset = datum.history.ticker\r\n        if (!this.assets.map(a => a.id).includes(asset.id)) {\r\n          this.assets.push({ id: asset.id, symbol: asset.symbol })\r\n        }\r\n\r\n        let pattern = datum.pattern\r\n        if (!this.patterns.map(p => p.id).includes(pattern.id)) {\r\n          this.patterns.push(pattern)\r\n        }\r\n      },\r\n      updatePatternsStats(direction, count) {\r\n        this.patternsStats.total += count\r\n\r\n        if (direction === constants.strings.bullish) {\r\n          this.patternsStats.bullish += count\r\n        } else if (direction === constants.strings.bearish) {\r\n          this.patternsStats.bearish += count\r\n        }\r\n      },\r\n      updateChartDatas(data) {\r\n        if (!(data.history.ticker.symbol in this.patternsByAsset)) {\r\n          this.patternsByAsset[data.history.ticker.symbol] = {}              \r\n        }\r\n        if (!(data.pattern.name in this.patternsByAsset[data.history.ticker.symbol])) {\r\n          this.patternsByAsset[data.history.ticker.symbol][data.pattern.name] = 0              \r\n        }\r\n        this.patternsByAsset[data.history.ticker.symbol][data.pattern.name] += data.count\r\n\r\n        if (!(data.pattern.name in this.assetsByPattern)) {\r\n          this.assetsByPattern[data.pattern.name] = {}              \r\n        }\r\n        if (!(data.history.ticker.symbol in this.assetsByPattern[data.pattern.name])) {\r\n          this.assetsByPattern[data.pattern.name][data.history.ticker.symbol] = 0              \r\n        }\r\n        this.assetsByPattern[data.pattern.name][data.history.ticker.symbol] += data.count\r\n      },\r\n      createChartDatas() {\r\n        this.chartData.patternsByAsset = this.selectedAsset ? this.createChartData(this.patternsByAsset[this.selectedAsset.symbol]) : null\r\n        this.chartData.assetsByPattern = this.selectedPattern ? this.createChartData(this.assetsByPattern[this.selectedPattern.name]) : null\r\n      },\r\n      createChartData(items) {\r\n        if (items) {\r\n          return {\r\n            datasets: [{\r\n              data: Object.values(items),\r\n              backgroundColor: Object.keys(items).map(_ => \"#\"+((1<<24)*Math.random()|0).toString(16))  // random colors\r\n            }],\r\n            labels: Object.keys(items)\r\n          }\r\n        }\r\n        return null\r\n      },      \r\n\r\n      // dropdowns selections methods\r\n      selectAsset(asset) {\r\n        this.selectedAsset = asset\r\n        this.createChartDatas()\r\n      },\r\n      selectPattern(pattern) {\r\n        this.selectedPattern = pattern\r\n        this.createChartDatas()\r\n      }      \r\n    },\r\n\r\n    watch: {\r\n      selectedAsset(val) {        \r\n        helper.updateStore(this.$store, 'selectedAsset', val, this.storeKey)\r\n      },\r\n      selectedPattern(val) {        \r\n        helper.updateStore(this.$store, 'selectedPattern', val, this.storeKey)\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.initData();\r\n    }\r\n  }  \r\n</script>\r\n<style>\r\n  .table > thead > tr > th {\r\n    font-size: inherit\r\n  }\r\n</style>"]}]}