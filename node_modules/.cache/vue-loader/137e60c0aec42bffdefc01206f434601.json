{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/featureEngineering.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/featureEngineering.vue","mtime":1587038704696},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KLndoLWJ0biB7DQogIGJveC1zaGFkb3c6IDBweCAwcHggMTBweCBibGFjazsNCn0NCg0KLmJ0bk92ZXIgew0KICBib3gtc2hhZG93OiAwcHggMHB4IDEwcHggd2hpdGU7DQp9DQo="},{"version":3,"sources":["featureEngineering.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuKA;AACA;AACA;;AAEA;AACA;AACA","file":"featureEngineering.vue","sourceRoot":"src/custom/apps/research","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <!-- <card class=\"card\"> to-do: must be in one card -->\r\n      <div class=\"col-lg-6 col-md-12\">\r\n        <card class=\"card\">\r\n          <table class=\"table tablesorter\">\r\n            <thead>\r\n            <tr>\r\n              <!-- <slot name=\"columns\"> -->\r\n                <h4 class=\"card-title\">{{$t('research.wareHouse.premiumStrategies')}}</h4>\r\n              <!-- </slot> -->\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            <tr v-for=\"strategyName in premiumStrategies\">\r\n              <!-- <slot :row=\"item\"> -->\r\n                <td style=\"border-top: 0px; margin-top: 10px;\">\r\n                  {{strategyName}}\r\n                </td>\r\n                <td style=\"border-top: 0px;\">\r\n                  <base-button type=\"secondary\" fill style=\"float:right; margin-left: 10px\">\r\n                    {{$t('research.wareHouse.remove')}}\r\n                  </base-button>\r\n                  <base-button type=\"secondary\" fill style=\"float:right;\">\r\n                    {{$t('research.wareHouse.select')}}\r\n                  </base-button>\r\n                </td>\r\n                <!-- to-do: export to Portfolio manager/Designed portfolio -->\r\n                <!-- to-do: v-if=\"strategies.enableLive\" -->                        \r\n                <!-- v-if=\"strategies.enableStore\" -->\r\n              <!-- </slot> -->\r\n            </tr>\r\n            </tbody>\r\n          </table>\r\n        </card>\r\n      </div>\r\n\r\n      <div class=\"col-lg-6 col-md-12\">\r\n        <card class=\"card\">\r\n          <table class=\"table tablesorter\">\r\n            <thead>\r\n            <tr>\r\n              <!-- <slot name=\"columns\"> -->\r\n                <h4 class=\"card-title\">{{$t('research.wareHouse.myStrategies')}}</h4>\r\n              <!-- </slot> -->\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n              <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" style=\"margin-left: 400px\" />\r\n              <tr v-else v-for=\"strategy in myStrategies\">\r\n                <!-- <slot :row=\"item\"> -->\r\n                  <td style=\"border-top: 0px; margin-top: 10px;\">\r\n                    {{strategy.name}}\r\n                  </td>\r\n                  <td style=\"border-top: 0px;\">\r\n                    <base-button @click=\"remove(strategy.id)\" type=\"secondary\" fill style=\"float:right; margin-left: 10px\">\r\n                      {{$t('research.wareHouse.remove')}}\r\n                    </base-button>\r\n                    <p style=\"float:right\">&nbsp;&nbsp;&nbsp;</p>\r\n                    <base-button @click=\"select(strategy.original_result_id)\" type=\"secondary\" fill style=\"float:right;\">\r\n                      {{$t('research.wareHouse.select')}}\r\n                    </base-button>\r\n                  </td>\r\n                  <!-- to-do: export to Portfolio manager/Designed portfolio -->\r\n                  <!-- to-do: v-if=\"strategies.enableLive\" -->                        \r\n                  <!-- v-if=\"strategies.enableStore\" -->\r\n                <!-- </slot> -->\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </card>\r\n      </div>\r\n    <!-- </card> -->\r\n  </div>\r\n</template>\r\n<script>\r\n  import { BaseButton } from \"@/components\";\r\n  import DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\n  import constants from '@/custom/assets/js/constants'\r\n  import helper from '@/custom/assets/js/helper';\r\n\r\n  var samplePortfolioNames = [\"S1 with very very long title\", \"S2 with very very long title\", \"S3 with very very long title\", \"S4 with very very long title\"];\r\n  \r\n\r\n  export default {\r\n    components: {\r\n      BaseButton,\r\n      DualRingLoader\r\n    },\r\n    data() {\r\n      return {   \r\n        warehouseKey: 'sidebar.wareHouse',\r\n        loading: false,\r\n\r\n        premiumStrategies: samplePortfolioNames,  \r\n        myStrategies: []\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      getMyStrategies() {\r\n        this.loading = true\r\n\r\n        this.myStrategies = []\r\n        this.$http\r\n        .get(constants.urls.datawarehouse.results)\r\n        .then(response => response.data.forEach(datum => {\r\n          if (!datum.in_portfolio) {\r\n            let idSuffix = `(${datum.original_result_id})`        \r\n            this.myStrategies.push({ \r\n              id: datum.id, \r\n              original_result_id: datum.original_result_id,\r\n              name: `${datum.name ? datum.name : helper.getDefaultPrName(datum.original_result_id)} ${datum.name.includes(idSuffix) ? '' : idSuffix}`\r\n            })\r\n          }\r\n        }))\r\n        .catch(error => {\r\n          console.log(error)\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t(this.warehouseKey))\r\n          }\r\n        })\r\n        .finally(() => this.loading = false)\r\n      },\r\n\r\n      remove(id) {\r\n        this.loading = true\r\n\r\n        this.$http\r\n        .delete(constants.urls.datawarehouse.result + id)\r\n        .catch(error => {\r\n          console.log(error)\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.warehouseKey)} ${this.$t('research.wareHouse.remove')}`)\r\n          }\r\n        })\r\n        .finally(() => {\r\n          this.getMyStrategies()\r\n          this.loading = false   \r\n        })\r\n      },\r\n\r\n      select(id) {   \r\n        this.loading = true\r\n\r\n        // add to portfolio\r\n        this.$http\r\n        .patch(constants.urls.datawarehouse.result + helper.encodeRouteParams([ id, constants.urls.patternLab.abbreviation ]), { in_portfolio: true })\r\n        .catch(error => {\r\n            console.log(error)\r\n            if (error.message === constants.strings.networkError) {\r\n                helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.warehouseKey)} ${this.$t('research.wareHouse.select')}`)\r\n            }\r\n        })\r\n        .finally(() => {\r\n          this.getMyStrategies()\r\n          this.loading = false   \r\n        })\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.getMyStrategies()\r\n    }\r\n  };\r\n</script>\r\n<style>\r\n.wh-btn {\r\n  box-shadow: 0px 0px 10px black;\r\n}\r\n\r\n.btnOver {\r\n  box-shadow: 0px 0px 10px white;\r\n}\r\n</style>"]}]}