{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/PortfolioManager.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/PortfolioManager.vue","mtime":1595835860230},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBQb3J0Zm9saW9DYXJkIGZyb20gIkAvY3VzdG9tL2NvbXBvbmVudHMvQ2FyZHMvUG9ydGZvbGlvQ2FyZC52dWUiOwppbXBvcnQgRHVhbFJpbmdMb2FkZXIgZnJvbSAnQGJpdC9qb3Noay52dWUtc3Bpbm5lcnMtY3NzLmR1YWwtcmluZy1sb2FkZXInOwoKaW1wb3J0IGNvbnN0YW50cyBmcm9tICdAL2N1c3RvbS9hc3NldHMvanMvY29uc3RhbnRzJzsKaW1wb3J0IGhlbHBlciBmcm9tICdAL2N1c3RvbS9hc3NldHMvanMvaGVscGVyJzsKCgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgUG9ydGZvbGlvQ2FyZCwKICAgIER1YWxSaW5nTG9hZGVyCiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRlc2lnbmVkU3RyYXRlZ2llczogW10sCiAgICAgIGxpdmVTdHJhdGVnaWVzOiBbXSwKICAgICAgZW1haWw6IG51bGwsCgogICAgICBsb2FkaW5nOiBmYWxzZQogICAgfQogIH0sCgogIGNvbXB1dGVkOiB7CiAgICBvcHRpbWFsU3RyYXRlZ2llcygpIHsKICAgICAgbGV0IGlkID0gMAogICAgICByZXR1cm4gT2JqZWN0LmVudHJpZXMoY29uc3RhbnRzLnVybHMuY2hhcnQpLm1hcChlbnRyeSA9PiB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlkOiBpZCsrLAogICAgICAgICAgbmFtZTogZW50cnlbMF0sCiAgICAgICAgICB1cmw6IGVudHJ5WzFdCiAgICAgICAgfQogICAgICB9KQogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIGluaXRTdHJhdGVnaWVzKCkgewogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlCgogICAgICB0aGlzLmRlc2lnbmVkU3RyYXRlZ2llcyA9IFtdCiAgICAgIHRoaXMubGl2ZVN0cmF0ZWdpZXMgPSBbXQogICAgICB0aGlzLiRodHRwCiAgICAgIC5nZXQoY29uc3RhbnRzLnVybHMuZGF0YXdhcmVob3VzZS5yZXN1bHRzKQogICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5kYXRhLmZvckVhY2goZGF0dW0gPT4gewogICAgICAgIGlmIChkYXR1bS5pbl9wb3J0Zm9saW8gJiYgIWRhdHVtLmxpdmUpIHsKICAgICAgICAgIHRoaXMuZGVzaWduZWRTdHJhdGVnaWVzLnB1c2goewogICAgICAgICAgICAgaWQ6IGRhdHVtLm9yaWdpbmFsX3Jlc3VsdF9pZCwKICAgICAgICAgICAgIG5hbWU6IGRhdHVtLm5hbWUsIAogICAgICAgICAgICAgdXJsOiBudWxsICAgIC8vIHRvLWRvOiBnZXQgdXJsIG9mIHN0YXRpc3RpY3Mgb2YgdGhlIHN0cmF0ZWd5IGluc3RlYWQgb2YgbnVsbAogICAgICAgICAgfSkgCiAgICAgICAgfQoKICAgICAgICBpZiAoZGF0dW0ubGl2ZSkgewogICAgICAgICAgdGhpcy5saXZlU3RyYXRlZ2llcy5wdXNoKHsKICAgICAgICAgICAgIGlkOiBkYXR1bS5vcmlnaW5hbF9yZXN1bHRfaWQsCiAgICAgICAgICAgICBuYW1lOiBkYXR1bS5uYW1lLCAKICAgICAgICAgICAgIHVybDogbnVsbCAgICAvLyB0by1kbzogZ2V0IHVybCBvZiBzdGF0aXN0aWNzIG9mIHRoZSBzdHJhdGVneSBpbnN0ZWFkIG9mIG51bGwKICAgICAgICAgIH0pIAogICAgICAgIH0KICAgICAgfSkpCiAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpCiAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09IGNvbnN0YW50cy5zdHJpbmdzLm5ldHdvcmtFcnJvcikgewogICAgICAgICAgaGVscGVyLm5vdGlmeUF1ZGlvKHRoaXMsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb25uZWN0aW9uTG9zdCcpLCAnZGFuZ2VyJywgdGhpcy4kdChjb25zdGFudHMuc3RvcmVLZXlzLnBvcnRmb2xpb01hbmFnZXIpKQogICAgICAgIH0KICAgICAgfSkKICAgICAgLmZpbmFsbHkoKCkgPT4gdGhpcy5sb2FkaW5nID0gZmFsc2UpCiAgICB9LAoKICAgIGluaXRFbWFpbCgpIHsKICAgICAgbGV0IGRhdGEgPSB0aGlzLiRzdG9yZS5nZXRJdGVtKGNvbnN0YW50cy50cmFuc2xhdGlvbktleXMuSUJMb2dpbikKICAgICAgaWYgKGRhdGEpIHsKICAgICAgICAgIHRoaXMuZW1haWwgPSBkYXRhLmVtYWlsCiAgICAgIH0KICAgIH0sCgogICAgLy8gZW1pdHRlZCBldmVudHMKICAgIGdvTGl2ZShpZCkgeyAgICAgICAgCiAgICAgIHRoaXMuJGh0dHAKICAgICAgLnBvc3QoY29uc3RhbnRzLnVybHMubGl2ZURlcGwuc3RyYXRlZ3kuZGVwbG95LCB7IGJ0X2lkOiBpZCwgdXNlcmlkOiB0aGlzLmVtYWlsIH0pCiAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcikKICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlID09PSBjb25zdGFudHMuc3RyaW5ncy5uZXR3b3JrRXJyb3IpIHsKICAgICAgICAgICAgICBoZWxwZXIubm90aWZ5QXVkaW8odGhpcywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nvbm5lY3Rpb25Mb3N0JyksICdkYW5nZXInLCBgJHt0aGlzLiR0KHRoaXMud2FyZWhvdXNlS2V5KX0gJHt0aGlzLiR0KCdyZXNlYXJjaC5wb3J0Zm9saW9NYW5hZ2VyLmxpdmUnKX1gKQogICAgICAgICAgfQogICAgICB9KQogICAgICAuZmluYWxseSgoKSA9PiB0aGlzLmluaXRTdHJhdGVnaWVzKCkpCiAgICB9LAoKICAgIHN0b3JlZChpZCkgeyAgICAgICAgCiAgICAgIHRoaXMuJGh0dHAKICAgICAgLnBhdGNoKGNvbnN0YW50cy51cmxzLmRhdGF3YXJlaG91c2UucmVzdWx0ICsgaGVscGVyLmVuY29kZVJvdXRlUGFyYW1zKFsgaWQsIGNvbnN0YW50cy51cmxzLnBhdHRlcm5MYWIuYWJicmV2aWF0aW9uIF0pLCB7IGluX3BvcnRmb2xpbzogZmFsc2UgfSkKICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKQogICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09IGNvbnN0YW50cy5zdHJpbmdzLm5ldHdvcmtFcnJvcikgewogICAgICAgICAgICAgIGhlbHBlci5ub3RpZnlBdWRpbyh0aGlzLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29ubmVjdGlvbkxvc3QnKSwgJ2RhbmdlcicsIGAke3RoaXMuJHQodGhpcy53YXJlaG91c2VLZXkpfSAke3RoaXMuJHQoJ3Jlc2VhcmNoLnBvcnRmb2xpb01hbmFnZXIubGl2ZScpfWApCiAgICAgICAgICB9CiAgICAgIH0pCiAgICAgIC5maW5hbGx5KCgpID0+IHRoaXMuaW5pdFN0cmF0ZWdpZXMoKSkKICAgIH0sCgogICAgc3RvcGVkKGlkKSB7ICAgICAgICAKICAgICAgdGhpcy4kaHR0cAogICAgICAucG9zdChjb25zdGFudHMudXJscy5saXZlRGVwbC5zdHJhdGVneS5zdG9wLCB7IGJ0X2lkOiBpZCwgdXNlcmlkOiB0aGlzLmVtYWlsIH0pCiAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcikKICAgICAgICAgIGlmIChlcnJvci5tZXNzYWdlID09PSBjb25zdGFudHMuc3RyaW5ncy5uZXR3b3JrRXJyb3IpIHsKICAgICAgICAgICAgICBoZWxwZXIubm90aWZ5QXVkaW8odGhpcywgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nvbm5lY3Rpb25Mb3N0JyksICdkYW5nZXInLCBgJHt0aGlzLiR0KHRoaXMud2FyZWhvdXNlS2V5KX0gJHt0aGlzLiR0KCdyZXNlYXJjaC5wb3J0Zm9saW9NYW5hZ2VyLmxpdmUnKX1gKQogICAgICAgICAgfQogICAgICB9KQogICAgICAuZmluYWxseSgoKSA9PiB0aGlzLmluaXRTdHJhdGVnaWVzKCkpCiAgICB9CiAgfSwKCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuaW5pdEVtYWlsKCkKICAgIHRoaXMuaW5pdFN0cmF0ZWdpZXMoKQogIH0KfTsK"},{"version":3,"sources":["PortfolioManager.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"PortfolioManager.vue","sourceRoot":"src/custom/apps/research","sourcesContent":["<template>\r\n  <div>\r\n    <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" style=\"margin-left: 250px\" />\r\n    <portfolio-card v-else \r\n                    :title=\"$t('research.portfolioManager.designedPortfolio')\"\r\n                    :strategies=\"designedStrategies\"\r\n                    @wentLive=\"goLive\"\r\n                    @stored=\"stored\">\r\n    </portfolio-card>\r\n    <portfolio-card v-if=\"!loading\"\r\n                    :title=\"$t('research.portfolioManager.livePortfolio')\"\r\n                    :strategies=\"liveStrategies\"\r\n                    :enableStop=\"true\"\r\n                    @stoped=\"stoped\">\r\n    </portfolio-card>\r\n    <portfolio-card :title=\"$t('research.portfolioManager.optimalPortfolio')\"\r\n                    :strategies=\"optimalStrategies\"\r\n                    @wentLive=\"goLive\"\r\n                    @stored=\"stored\">\r\n    </portfolio-card>\r\n    <!-- to-do: stats as a source from Ware house? -->\r\n  </div>\r\n</template>\r\n<script>\r\n  import PortfolioCard from \"@/custom/components/Cards/PortfolioCard.vue\";\r\n  import DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\n\r\n  import constants from '@/custom/assets/js/constants';\r\n  import helper from '@/custom/assets/js/helper';\r\n\r\n\r\n  export default {\r\n    components: {\r\n      PortfolioCard,\r\n      DualRingLoader\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        designedStrategies: [],\r\n        liveStrategies: [],\r\n        email: null,\r\n\r\n        loading: false\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      optimalStrategies() {\r\n        let id = 0\r\n        return Object.entries(constants.urls.chart).map(entry => {\r\n          return {\r\n            id: id++,\r\n            name: entry[0],\r\n            url: entry[1]\r\n          }\r\n        })\r\n      }\r\n    },\r\n\r\n    methods: {\r\n      initStrategies() {\r\n        this.loading = true\r\n\r\n        this.designedStrategies = []\r\n        this.liveStrategies = []\r\n        this.$http\r\n        .get(constants.urls.datawarehouse.results)\r\n        .then(response => response.data.forEach(datum => {\r\n          if (datum.in_portfolio && !datum.live) {\r\n            this.designedStrategies.push({\r\n               id: datum.original_result_id,\r\n               name: datum.name, \r\n               url: null    // to-do: get url of statistics of the strategy instead of null\r\n            }) \r\n          }\r\n\r\n          if (datum.live) {\r\n            this.liveStrategies.push({\r\n               id: datum.original_result_id,\r\n               name: datum.name, \r\n               url: null    // to-do: get url of statistics of the strategy instead of null\r\n            }) \r\n          }\r\n        }))\r\n        .catch(error => {\r\n          console.log(error)\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t(constants.storeKeys.portfolioManager))\r\n          }\r\n        })\r\n        .finally(() => this.loading = false)\r\n      },\r\n\r\n      initEmail() {\r\n        let data = this.$store.getItem(constants.translationKeys.IBLogin)\r\n        if (data) {\r\n            this.email = data.email\r\n        }\r\n      },\r\n\r\n      // emitted events\r\n      goLive(id) {        \r\n        this.$http\r\n        .post(constants.urls.liveDepl.strategy.deploy, { bt_id: id, userid: this.email })\r\n        .catch(error => {\r\n            console.log(error)\r\n            if (error.message === constants.strings.networkError) {\r\n                helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.warehouseKey)} ${this.$t('research.portfolioManager.live')}`)\r\n            }\r\n        })\r\n        .finally(() => this.initStrategies())\r\n      },\r\n\r\n      stored(id) {        \r\n        this.$http\r\n        .patch(constants.urls.datawarehouse.result + helper.encodeRouteParams([ id, constants.urls.patternLab.abbreviation ]), { in_portfolio: false })\r\n        .catch(error => {\r\n            console.log(error)\r\n            if (error.message === constants.strings.networkError) {\r\n                helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.warehouseKey)} ${this.$t('research.portfolioManager.live')}`)\r\n            }\r\n        })\r\n        .finally(() => this.initStrategies())\r\n      },\r\n\r\n      stoped(id) {        \r\n        this.$http\r\n        .post(constants.urls.liveDepl.strategy.stop, { bt_id: id, userid: this.email })\r\n        .catch(error => {\r\n            console.log(error)\r\n            if (error.message === constants.strings.networkError) {\r\n                helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.warehouseKey)} ${this.$t('research.portfolioManager.live')}`)\r\n            }\r\n        })\r\n        .finally(() => this.initStrategies())\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.initEmail()\r\n      this.initStrategies()\r\n    }\r\n  };\r\n</script>\r\n<style>\r\n</style>"]}]}