{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/performanceResults/Patterns.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/performanceResults/Patterns.vue","mtime":1587025922792},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Patterns.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Patterns.vue","sourceRoot":"src/custom/apps/research/patternLab/performanceResults","sourcesContent":["<template>\n\n        <fancy-table :title=\"$t(patternsKey + '.title')\"\n                     :showTitle=\"false\"\n                     :data=\"tableData\"\n                     :columns=\"columns\"\n                     :editable=\"true\"\n                     :saveable=\"true\"\n                     :allowSave=\"allowSave\"\n                     :savedRows=\"savedRows\"\n                     @edited=\"edited\" \n                     @saved=\"saved\" \n                     :key=\"tableKey\" />\n\n</template>\n<script>\nimport FancyTable from '@/custom/components/Tables/FancyTable';  \nimport constants from '@/custom/assets/js/constants'\nimport helper from '@/custom/assets/js/helper';\n\n\nexport default {\n    components: {\n        FancyTable\n    },\n\n    data() {\n        return {\n            patternsKey: constants.translationKeys.patterns,\n\n            tableData: null,\n            columns: this.$t(constants.translationKeys.patterns + '.columns'),\n            allowSave: false,\n            savedRows: [],\n\n            tableKey: 0\n        }\n    },\n\n    methods: {\n        initData() { \n            let backtestsIDs = []\n            let unsavedBacktestsIDs = []\n\n            // get data from store\n            let data = this.$store.getItem(constants.storeKeys.backtestPatterns)\n            if (data) {\n                this.tableData = helper.getStoredBacktests(data)\n                this.allowSave = data.allowSave\n                backtestsIDs = this.tableData.map(bt => bt.get('btId'))\n                unsavedBacktestsIDs = data.unsavedBacktestsIDs\n            }\n            \n            // get data from server\n            this.$http\n            .get(constants.urls.datawarehouse.results)\n            .then(response => { \n                response.data.forEach(datum => {\n                    if (backtestsIDs.includes(datum.original_result_id) && !unsavedBacktestsIDs.includes(datum.original_result_id)) {\n                        this.savedRows.push(datum.original_result_id)\n                    }\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                if (error.message === constants.strings.networkError) {\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t(this.patternsKey + '.title'))\n                }\n            })\n            .finally(_ => {})\n        },        \n\n        // FancyTable emited event\n        edited(data) {\n            // check if new value is valid\n            let assetsPatterns = helper.getAssetsPatternsPickerData(this.$store)\n            let clNr = 0\n            let btId = this.tableData[data.position[0]].get('btId')\n\n            switch(data.position[1]) {\n                case this.columns[clNr++]:  // Name                    \n                    data.value = data.value + (btId && btId !== -1 ? ` (${btId})` : '')\n                    break\n                case this.columns[clNr++]:   // From\n                case this.columns[clNr++]:   // To\n                    if (isNaN(new Date(data.value).getMonth())) {\n                        return\n                    }\n                    break;\n                case this.columns[clNr++]:   // Time frame\n                    if (helper.convertTimeframe(data.value) === -1) {\n                        return\n                    }\n                    break\n                case this.columns[clNr++]:   // Asset\n                    if (!assetsPatterns.selectedAssets.map(sa => sa.symbol).includes(data.value)) {\n                        return\n                    }\n                    break\n                case this.columns[clNr++]:   // Pattern\n                    if (!assetsPatterns.selectedPatterns.map(sa => sa.name).includes(data.value)) {\n                        return\n                    }\n                    break\n                case this.columns[clNr++]:   // Initial capital\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    data.value = `${data.value} ${constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Analyze\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    data.value = `${data.value} ${helper.pluralize(data.value, constants.translationKeys.patterns + '.bar')}`\n                    break\n                case this.columns[clNr++]:   // Profit Target\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    let unit = this.tableData[data.position[0]].get(this.columns[clNr-1].toLowerCase())\n                    let unitSplitted = unit ? unit.split(' ') : []\n                    data.value = `${data.value} ${unitSplitted.length ? unitSplitted[1] : constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Stop Loss\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    unit = this.tableData[data.position[0]].get(this.columns[clNr-1].toLowerCase())\n                    unitSplitted = unit ? unit.split(' ') : []\n                    data.value = `${data.value} ${unitSplitted.length ? unitSplitted[1] : constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Trend filter (moving average)\n                    if (isNaN(Number(data.value))) {\n                        return\n                    }\n                    data.value = `${data.value} ${constants.defaultUnit}`\n                    break\n                case this.columns[clNr++]:   // Direction\n                    if (!Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions')).includes(data.value)) {\n                        return\n                    }\n                    break\n                default:\n                    return\n            }\n\n            this.tableData[data.position[0]].set(data.position[1].toLowerCase(), data.value)   // write edited/changed value to the table\n            helper.updateStoreBacktests(this.$store, 'backtests', this.tableData, constants.storeKeys.backtestPatterns)            \n\n            this.savedRows.splice(this.savedRows.indexOf(btId), 1)  // remove from savedRows\n            helper.updateStore(this.$store, 'unsavedBacktestsIDs', this.$store.getItem(constants.storeKeys.backtestPatterns).unsavedBacktestsIDs.concat([ btId ]), constants.storeKeys.backtestPatterns)\n\n            this.tableKey++\n        },\n\n        saved(row) {\n            this.loading = true\n\n            // change saved to true\n            this.$http\n            .patch(constants.urls.patternLab.backtestPatterns.results + '/' + row.btId, { ...helper.mapStrategyFromRow(row, false), saved: true })\n            .then(_ => { \n                this.savedRows.push(row.btId) \n                let unsavedBacktestsIDs = this.$store.getItem(constants.storeKeys.backtestPatterns).unsavedBacktestsIDs\n                unsavedBacktestsIDs.splice(unsavedBacktestsIDs.indexOf(row.btId), 1)  // remove from unsavedBacktestsIDs\n                helper.updateStore(this.$store, 'unsavedBacktestsIDs', unsavedBacktestsIDs, constants.storeKeys.backtestPatterns) \n\n                // change name of previously stored bt\n                this.$http\n                .patch(constants.urls.datawarehouse.result + helper.encodeRouteParams([ row.btId, constants.urls.patternLab.abbreviation ]), { name: row[this.columns[0].toLowerCase()] })\n                .catch(error => {\n                    console.log(error)\n                    if (error.message === constants.strings.networkError) {\n                        helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.patternsKey + '.title')} ${this.$t('research.saveName')}`)\n                    }\n                })\n            })\n            .catch(error => {\n                console.log(error)\n                if (error.message === constants.strings.networkError) {\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', `${this.$t(this.patternsKey + '.title')} ${this.$t('research.save')}`)\n                }\n            })\n            .finally(() => this.loading = false)\n        }\n    },\n\n    mounted() {\n        this.initData()\n    },\n\n    watch: {\n      savedRows: {\n        handler(val){\n          helper.updateStore(this.$store, 'savedBacktestsIDs', val, constants.storeKeys.backtestPatterns) \n        },\n        deep: true\n      }\n    }\n}\n</script>\n<style scoped>\n</style>"]}]}