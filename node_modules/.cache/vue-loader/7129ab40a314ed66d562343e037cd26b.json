{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/layout/application/patternLab/performanceResults/TopNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/layout/application/patternLab/performanceResults/TopNavbar.vue","mtime":1587025922796},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBYTFNYIGZyb20gJ3hsc3gveGxzeCc7CmltcG9ydCBjb25zdGFudHMgZnJvbSAnQC9jdXN0b20vYXNzZXRzL2pzL2NvbnN0YW50cycKaW1wb3J0IGhlbHBlciBmcm9tICdAL2N1c3RvbS9hc3NldHMvanMvaGVscGVyJzsKCgpleHBvcnQgZGVmYXVsdCB7CiAgbWV0aG9kczogewogICAgZXhwb3J0Q2xpY2soKSB7CiAgICAgIGxldCBzaGVldHMgPSBbXQogICAgICBsZXQgc2hlZXRLZXlzID0gWyBjb25zdGFudHMudHJhbnNsYXRpb25LZXlzLnBhdHRlcm5zLCBjb25zdGFudHMudHJhbnNsYXRpb25LZXlzLnRyYWRlcywgY29uc3RhbnRzLnRyYW5zbGF0aW9uS2V5cy5wZXJmb3JtYW5jZU1ldHJpY3MgXQogICAgICBsZXQgc2hlZXRLZXlzRG9uZSA9IFtdCgogICAgICBzaGVldEtleXMuZm9yRWFjaChzaGVldEtleSA9PiB7CiAgICAgICAgbGV0IHNoZWV0ID0geyBuYW1lOiB0aGlzLiR0KHNoZWV0S2V5ICsgJy50aXRsZScpLCBjb2x1bW5zOiBbXSwgZGF0YTogW10gfQoKICAgICAgICAvLyBjcmVhdGUgY29sdW1ucyBvYmplY3RzCiAgICAgICAgbGV0IGNvbHVtbnMgPSB0aGlzLiR0KHNoZWV0S2V5ICsgJy5jb2x1bW5zJykKICAgICAgICBjb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHNoZWV0LmNvbHVtbnMucHVzaCh7IGxhYmVsOiBjb2x1bW4sIGZpZWxkOiBjb2x1bW4udG9Mb3dlckNhc2UoKSB9KSkKCiAgICAgICAgLy8gY3JlYXRlIGRhdGEgb2JqZWN0cwogICAgICAgIGlmIChzaGVldEtleSA9PT0gY29uc3RhbnRzLnRyYW5zbGF0aW9uS2V5cy5wYXR0ZXJucykgewogICAgICAgICAgbGV0IGRhdGEgPSB0aGlzLiRzdG9yZS5nZXRJdGVtKGNvbnN0YW50cy5zdG9yZUtleXMuYmFja3Rlc3RQYXR0ZXJucykKICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgIHRoaXMuY3JlYXRlRGF0YShoZWxwZXIuZ2V0U3RvcmVkQmFja3Rlc3RzKGRhdGEpLCBzaGVldCwgY29sdW1ucykgICAgICAgICAgICAgCiAgICAgICAgICB9CgogICAgICAgICAgc2hlZXRzLnB1c2goc2hlZXQpCiAgICAgICAgICBzaGVldEtleXNEb25lLnB1c2goc2hlZXRLZXkpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuJGh0dHAKICAgICAgICAgIC5nZXQoY29uc3RhbnRzLnVybHMucGF0dGVybkxhYi5iYWNrdGVzdFBhdHRlcm5zLnJlc3VsdHMpCiAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7CiAgICAgICAgICAgIGxldCByb3dzID0gW10KCiAgICAgICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChkYXR1bSA9PiB7CiAgICAgICAgICAgICAgbGV0IGJhc2UgPSBoZWxwZXIuZ2V0QmFja3Rlc3RQYXR0ZXJuc1RhYmxlQmFzZShkYXR1bSwgdGhpcy4kc3RvcmUsIHRoaXMuJHQoY29uc3RhbnRzLnRyYW5zbGF0aW9uS2V5cy5wYXR0ZXJucyArICcuY29sdW1ucycpKQoKICAgICAgICAgICAgICBpZiAoZGF0dW0uZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYFBhdHRlcm4gcmVzdWx0cyBvZiAnJHtiYXNlLm5hbWV9JyBoYXMgc29tZSBwcm9ibGVtczogJHtkYXR1bS5tc2d9YCkKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHNoZWV0S2V5ID09PSBjb25zdGFudHMudHJhbnNsYXRpb25LZXlzLnRyYWRlcykgewogICAgICAgICAgICAgICAgICBoZWxwZXIuY3JlYXRlVHJhZGVzUm93KHJvd3MsIGRhdHVtLCBiYXNlKQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaGVldEtleSA9PT0gY29uc3RhbnRzLnRyYW5zbGF0aW9uS2V5cy5wZXJmb3JtYW5jZU1ldHJpY3MpIHsgICAgCiAgICAgICAgICAgICAgICAgIGhlbHBlci5jcmVhdGVQZXJmTWV0cmljc1Jvdyhyb3dzLCBkYXR1bSwgYmFzZSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCgogICAgICAgICAgICB0aGlzLmNyZWF0ZURhdGEocm93cywgc2hlZXQsIGNvbHVtbnMpICAgICAgICAgICAgIAogICAgICAgICAgfSkKICAgICAgICAgIC5jYXRjaChlcnJvciA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTsKICAgICAgICAgICAgaWYgKGVycm9yLm1lc3NhZ2UgPT09IGNvbnN0YW50cy5zdHJpbmdzLm5ldHdvcmtFcnJvcikgewogICAgICAgICAgICAgIGhlbHBlci5ub3RpZnlBdWRpbyh0aGlzLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29ubmVjdGlvbkxvc3QnKSwgJ2RhbmdlcicsIHRoaXMuJHQoJ25vdGlmaWNhdGlvbnMuYmVDb25uZWN0aW9uTG9zdCcpICsgJygnICsgdGhpcy50aXRsZSArICcgJyArIHRoaXMuJHQoJ3RhYmxlJykgKyAnKScpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgICAuZmluYWxseSgoKSA9PiB7CiAgICAgICAgICAgIHNoZWV0cy5wdXNoKHNoZWV0KQogICAgICAgICAgICBzaGVldEtleXNEb25lLnB1c2goc2hlZXRLZXkpCgogICAgICAgICAgICBpZiAoc2hlZXRLZXlzLnNvcnQoKS5qb2luKCcsJykgPT09IHNoZWV0S2V5c0RvbmUuc29ydCgpLmpvaW4oJywnKSkgeyAgLy8gYXJyYXlzIGFyZSBzYW1lLCBpZS53ZSBhcmUgZmluaXNoZWQKICAgICAgICAgICAgICB0aGlzLmV4cG9ydEV4Y2VsKHNoZWV0cykKICAgICAgICAgICAgfQogICAgICAgICAgfSkgICAgICAgICAgICAKICAgICAgICB9CiAgICAgIH0pCiAgICB9LAogICAgY3JlYXRlRGF0YShvbGRSb3dzLCBzaGVldCwgY29sdW1ucykgewogICAgICBvbGRSb3dzLmZvckVhY2gob2xkUm93ID0+IHsKICAgICAgICBsZXQgcm93ID0ge30KICAgICAgICBsZXQgY2xOciA9IDAKICAgICAgICBjb2x1bW5zLmZvckVhY2goY29sdW1uID0+IHsKICAgICAgICAgIHJvd1tjb2x1bW4udG9Mb3dlckNhc2UoKV0gPSBvbGRSb3cgaW5zdGFuY2VvZiBNYXAgPyBvbGRSb3cuZ2V0KGNvbHVtbi50b0xvd2VyQ2FzZSgpKSA6IG9sZFJvd1tjbE5yXQogICAgICAgICAgY2xOcisrCiAgICAgICAgfSkKICAgICAgICBzaGVldC5kYXRhLnB1c2gocm93KQogICAgICB9KQogICAgfSwKCiAgICBleHBvcnRFeGNlbChzaGVldHMpIHsKICAgICAgLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL3QtY2hhdG95YW4vdnVlLWV4Y2VsLXhsc3ggLSBmdW5jdGlvbmFsaXR5IG9mIGV4cG9ydCB0byBtdWx0aXBsZSBzaGVldHMgd2FzIGFkZGVkLgogICAgICBsZXQgd2IgPSBYTFNYLnV0aWxzLmJvb2tfbmV3KCkgICAgICAgICAgICAgICAgCgogICAgICBzaGVldHMuZm9yRWFjaChzaGVldCA9PiB7CiAgICAgICAgaWYgKHNoZWV0LmNvbHVtbnMubGVuZ3RoID09PSAwIHx8IHNoZWV0LmRhdGEubGVuZ3RoID09PSAwKXsKICAgICAgICAgIGNvbnNvbGUubG9nKGBDb2x1bW5zIG9yIGRhdGEgb2Ygc2hlZXQgJyR7c2hlZXQubmFtZX0nIG1pc3NpbmchIFNoZWV0IHNraXBwZWQuYCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGxldCBjcmVhdGVYTFNMRm9ybWF0T2JqID0gW107CiAgICAgICAgICBsZXQgbmV3WGxzSGVhZGVyID0gW107CiAgICAgICAgICBzaGVldC5jb2x1bW5zLmZvckVhY2godmFsdWUgPT4gewogICAgICAgICAgICAgIG5ld1hsc0hlYWRlci5wdXNoKHZhbHVlLmxhYmVsKTsKICAgICAgICAgIH0pOwoKICAgICAgICAgIGNyZWF0ZVhMU0xGb3JtYXRPYmoucHVzaChuZXdYbHNIZWFkZXIpOwogICAgICAgICAgc2hlZXQuZGF0YS5mb3JFYWNoKHZhbHVlID0+IHsKICAgICAgICAgICAgICBsZXQgaW5uZXJSb3dEYXRhID0gW107CiAgICAgICAgICAgICAgc2hlZXQuY29sdW1ucy5mb3JFYWNoKHZhbCA9PiB7CiAgICAgICAgICAgICAgICAgIGlmICh2YWwuZGF0YUZvcm1hdCAmJiB0eXBlb2YgdmFsLmRhdGFGb3JtYXQgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgIGlubmVyUm93RGF0YS5wdXNoKHZhbC5kYXRhRm9ybWF0KHZhbHVlW3ZhbC5maWVsZF0pKTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgIGlubmVyUm93RGF0YS5wdXNoKHZhbHVlW3ZhbC5maWVsZF0pOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgY3JlYXRlWExTTEZvcm1hdE9iai5wdXNoKGlubmVyUm93RGF0YSk7CiAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgIAoKICAgICAgICAgIGxldCB3c19uYW1lID0gc2hlZXQubmFtZTsKICAgICAgICAgIAogICAgICAgICAgbGV0IHdzID0gWExTWC51dGlscy5hb2FfdG9fc2hlZXQoY3JlYXRlWExTTEZvcm1hdE9iaik7CiAgICAgICAgICBYTFNYLnV0aWxzLmJvb2tfYXBwZW5kX3NoZWV0KHdiLCB3cywgd3NfbmFtZSk7CiAgICAgICAgfQogICAgICB9KQoKICAgICAgWExTWC53cml0ZUZpbGUod2IsIHRoaXMuJHQoJ3Jlc2VhcmNoLnBhdHRlcm5MYWIuYmFja3Rlc3RQYXR0ZXJucy50aXRsZScpICsgIi54bHN4Iik7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["TopNavbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"TopNavbar.vue","sourceRoot":"src/custom/layout/application/patternLab/performanceResults","sourcesContent":["<template>\r\n  <nav class=\"navbar navbar-expand-lg navbar-absolute navbar-transparent\">\r\n    <div class=\"container-fluid\">\r\n      <div class=\"navbar-wrapper\">\r\n        <div style=\"margin-top: -40px;\">\r\n          <router-link class=\"navbar-brand\" to=\"/research/patternLab/backtestPatterns/performanceResults/patterns\">{{$t(\"research.patternLab.backtestPatterns.performanceResults.patterns.title\")}}</router-link>\r\n          <router-link class=\"navbar-brand\" to=\"/research/patternLab/backtestPatterns/performanceResults/trades\">{{$t(\"research.patternLab.backtestPatterns.performanceResults.trades.title\")}}</router-link>\r\n          <router-link class=\"navbar-brand\" to=\"/research/patternLab/backtestPatterns/performanceResults/performanceMetrics\">{{$t(\"research.patternLab.backtestPatterns.performanceResults.performanceMetrics.title\")}}</router-link>\r\n          <router-link class=\"navbar-brand\" to=\"/research/patternLab/backtestPatterns/performanceResults/chart\">{{$t(\"research.patternLab.backtestPatterns.performanceResults.chart.title\")}}</router-link>\r\n\r\n          <base-button native-type=\"submit\" type=\"secondary\" size=\"sm\" @click=\"exportClick\">{{ $t('research.patternLab.backtestPatterns.export') }}</base-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</template>\r\n<script>\r\n  import XLSX from 'xlsx/xlsx';\r\n  import constants from '@/custom/assets/js/constants'\r\n  import helper from '@/custom/assets/js/helper';\r\n\r\n\r\n  export default {\r\n    methods: {\r\n      exportClick() {\r\n        let sheets = []\r\n        let sheetKeys = [ constants.translationKeys.patterns, constants.translationKeys.trades, constants.translationKeys.performanceMetrics ]\r\n        let sheetKeysDone = []\r\n\r\n        sheetKeys.forEach(sheetKey => {\r\n          let sheet = { name: this.$t(sheetKey + '.title'), columns: [], data: [] }\r\n\r\n          // create columns objects\r\n          let columns = this.$t(sheetKey + '.columns')\r\n          columns.forEach(column => sheet.columns.push({ label: column, field: column.toLowerCase() }))\r\n\r\n          // create data objects\r\n          if (sheetKey === constants.translationKeys.patterns) {\r\n            let data = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n            if (data) {\r\n              this.createData(helper.getStoredBacktests(data), sheet, columns)             \r\n            }\r\n\r\n            sheets.push(sheet)\r\n            sheetKeysDone.push(sheetKey)\r\n          } else {\r\n            this.$http\r\n            .get(constants.urls.patternLab.backtestPatterns.results)\r\n            .then(response => {\r\n              let rows = []\r\n\r\n              response.data.forEach(datum => {\r\n                let base = helper.getBacktestPatternsTableBase(datum, this.$store, this.$t(constants.translationKeys.patterns + '.columns'))\r\n\r\n                if (datum.error) {\r\n                    console.log(`Pattern results of '${base.name}' has some problems: ${datum.msg}`)\r\n                } else {\r\n                  if (sheetKey === constants.translationKeys.trades) {\r\n                    helper.createTradesRow(rows, datum, base)\r\n                  } else if (sheetKey === constants.translationKeys.performanceMetrics) {    \r\n                    helper.createPerfMetricsRow(rows, datum, base)\r\n                  }\r\n                }\r\n              })\r\n\r\n              this.createData(rows, sheet, columns)             \r\n            })\r\n            .catch(error => {\r\n              console.log(error);\r\n              if (error.message === constants.strings.networkError) {\r\n                helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.title + ' ' + this.$t('table') + ')')\r\n              }\r\n            })\r\n            .finally(() => {\r\n              sheets.push(sheet)\r\n              sheetKeysDone.push(sheetKey)\r\n  \r\n              if (sheetKeys.sort().join(',') === sheetKeysDone.sort().join(',')) {  // arrays are same, ie.we are finished\r\n                this.exportExcel(sheets)\r\n              }\r\n            })            \r\n          }\r\n        })\r\n      },\r\n      createData(oldRows, sheet, columns) {\r\n        oldRows.forEach(oldRow => {\r\n          let row = {}\r\n          let clNr = 0\r\n          columns.forEach(column => {\r\n            row[column.toLowerCase()] = oldRow instanceof Map ? oldRow.get(column.toLowerCase()) : oldRow[clNr]\r\n            clNr++\r\n          })\r\n          sheet.data.push(row)\r\n        })\r\n      },\r\n\r\n      exportExcel(sheets) {\r\n        // Inspired by https://github.com/t-chatoyan/vue-excel-xlsx - functionality of export to multiple sheets was added.\r\n        let wb = XLSX.utils.book_new()                \r\n\r\n        sheets.forEach(sheet => {\r\n          if (sheet.columns.length === 0 || sheet.data.length === 0){\r\n            console.log(`Columns or data of sheet '${sheet.name}' missing! Sheet skipped.`);\r\n          } else {\r\n            let createXLSLFormatObj = [];\r\n            let newXlsHeader = [];\r\n            sheet.columns.forEach(value => {\r\n                newXlsHeader.push(value.label);\r\n            });\r\n\r\n            createXLSLFormatObj.push(newXlsHeader);\r\n            sheet.data.forEach(value => {\r\n                let innerRowData = [];\r\n                sheet.columns.forEach(val => {\r\n                    if (val.dataFormat && typeof val.dataFormat === 'function') {\r\n                        innerRowData.push(val.dataFormat(value[val.field]));\r\n                    } else {\r\n                        innerRowData.push(value[val.field]);\r\n                    }\r\n                });\r\n                createXLSLFormatObj.push(innerRowData);\r\n            });                    \r\n\r\n            let ws_name = sheet.name;\r\n            \r\n            let ws = XLSX.utils.aoa_to_sheet(createXLSLFormatObj);\r\n            XLSX.utils.book_append_sheet(wb, ws, ws_name);\r\n          }\r\n        })\r\n\r\n        XLSX.writeFile(wb, this.$t('research.patternLab.backtestPatterns.title') + \".xlsx\");\r\n      }\r\n    }\r\n  };\r\n</script>\r\n<style>\r\n</style>"]}]}