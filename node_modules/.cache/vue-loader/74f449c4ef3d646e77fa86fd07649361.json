{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/Login.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/Login.vue","mtime":1587025922788},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoubGFuZGluZ0NhcmQgew0KICAgIG1hcmdpbjogYXV0bzsNCiAgICBib3JkZXItcmFkaXVzOiAxcmVtOw0KICAgIGJhY2tncm91bmQ6ICMyZjM2Njg7DQp9DQoNCi5tZXNzYWdlIHsNCiAgICB3aGl0ZS1zcGFjZTogcHJlLWxpbmU7DQp9DQoNCi5ub0Vycm9yIHsNCiAgICBjb2xvcjogZ3JheTsgICAgDQp9DQoNCi5lcnJvciB7DQogIGNvbG9yOiByZWQgIWltcG9ydGFudDsNCn0NCg0KLmxvYWRlciB7DQogIHdpZHRoOiA4MHB4OyANCiAgaGVpZ2h0OiA4MHB4OyAgDQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgbGVmdDogMTUwcHg7DQp9DQo="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuVA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/custom/apps","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <img src=\"../assets/img/logo2020.png\" class=\"logo\" :alt=\"$t('siteTitle')\" style=\"height: 25%;width: 25%;margin-top: 80px;margin-right: -300px;margin-left: 200px;\"/>\r\n\r\n    <SlideYUpTransition>\r\n        \r\n        <!-- login -->\r\n        <card type=\"secondary\"\r\n                header-classes=\"bg-white pb-5\"\r\n                body-classes=\"p-0 px-lg-5 py-lg-5\"\r\n                class=\"modal-sm animated landingCard\"\r\n                :class=\"{ shake: isShaking }\"\r\n                v-if=\"cards.showLogin.value\">\r\n            <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"'loader'\" style=\"top: 150px\" />\r\n            <template>\r\n                <div class=\"text-muted text-center mb-3\">\r\n                    {{$t('login.signIn') + \" \" + $t('login.with')}}\r\n                </div>\r\n                <div class=\"btn-wrapper text-center\">\r\n                    <base-button type=\"secondary\" style=\"width: 40%;\">\r\n                        <img src=\"../assets/img/google-logo-oldschool.png\" style=\"margin-left: -10px\">\r\n                        <!-- slot=\"icon\" -->\r\n                        &nbsp;&nbsp;Google\r\n                    </base-button>                \r\n                </div>\r\n            </template>\r\n            <br/>\r\n            <template>\r\n                <div class=\"text-center text-muted mb-4\">\r\n                    <small>{{$t('login.signInCredentials')}}</small>\r\n                </div>\r\n                <form role=\"form\">\r\n                    <base-input alternative\r\n                                class=\"mb-3\"\r\n                                :placeholder=\"$t('login.emailExample')\"\r\n                                addon-left-icon=\"ni ni-email-83\"\r\n                                v-model=\"email\"\r\n                                @keyup.enter=\"logIn\">\r\n                    </base-input>\r\n                    <base-input alternative\r\n                                type=\"password\"\r\n                                :placeholder=\"$t('login.password')\"\r\n                                addon-left-icon=\"ni ni-lock-circle-open\"\r\n                                v-model=\"pass\"\r\n                                @keyup.enter=\"logIn\">\r\n                    </base-input>\r\n                    <div class=\"text-center\">\r\n                        <p :class=\"[ error ? errorClass : noErrorClass , msgClass ]\">{{message}}</p>                    \r\n                        <base-button v-if=\"error\" style=\"color: #00f2c3\" type=\"link\" @click=\"resetPass\">{{$t('login.resetPass')}}</base-button>\r\n                    </div>\r\n                    <base-checkbox v-model=\"remember\">\r\n                        {{$t('login.remember')}}\r\n                    </base-checkbox>\r\n                    <div class=\"text-center\">\r\n                        <base-button type=\"secondary\" class=\"my-4\" @click=\"logIn\">{{$t('login.signIn')}}</base-button>\r\n                        <small><p style=\"color: gray;\">{{$t('login.lookingTo')}} <a href=\"#\" @click=\"openRegisterModal\">{{$t('login.createAccount')}}</a></p></small>\r\n                    </div>\r\n                </form>\r\n            </template>\r\n        </card>\r\n\r\n        <!-- register -->\r\n        <card type=\"secondary\"\r\n                header-classes=\"bg-white pb-5\"\r\n                body-classes=\"p-0 px-lg-5 py-lg-5\"\r\n                class=\"modal-sm animated landingCard\"\r\n                :class=\"{ shake: isShaking }\"\r\n                v-if=\"cards.showRegister.value\">\r\n            <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"'loader'\" style=\"top: 75px\" />\r\n            <template>\r\n                <div class=\"text-center text-muted mb-4\">\r\n                    {{$t('login.register') + \" \" + $t('login.with')}}\r\n                </div>\r\n                <form role=\"form\">\r\n                    <base-input alternative\r\n                                class=\"mb-3\"\r\n                                :placeholder=\"$t('login.emailExample')\"\r\n                                addon-left-icon=\"ni ni-email-83\"\r\n                                v-model=\"email\"\r\n                                @keyup.enter=\"register\">\r\n                    </base-input>\r\n                    <base-input alternative\r\n                                type=\"password\"\r\n                                :placeholder=\"$t('login.password')\"\r\n                                addon-left-icon=\"ni ni-lock-circle-open\"\r\n                                v-model=\"pass1\"\r\n                                @keyup.enter=\"register\">\r\n                    </base-input>\r\n                    <base-input alternative\r\n                                type=\"password\"\r\n                                :placeholder=\"$t('login.passwordAgain')\"\r\n                                addon-left-icon=\"ni ni-lock-circle-open\"\r\n                                v-model=\"pass2\"\r\n                                @keyup.enter=\"register\">\r\n                    </base-input>\r\n                    <div class=\"text-center\">\r\n                        <p :class=\"[ error ? errorClass : noErrorClass , msgClass ]\">{{message}}</p>                    \r\n                        <base-button type=\"secondary\" class=\"my-4\" @click=\"register\">{{$t('login.register')}}</base-button>\r\n                        <small><p style=\"color: gray;\">{{$t('login.alreadyAccount')}} <a href=\"#\" @click=\"openLoginModal\">{{$t('login.login')}}</a></p></small>\r\n                    </div>\r\n                </form>\r\n            </template>\r\n        </card>\r\n\r\n        <!-- resetPass -->\r\n        <card type=\"secondary\"\r\n                header-classes=\"bg-white pb-5\"\r\n                body-classes=\"p-0 px-lg-5 py-lg-5\"\r\n                class=\"modal-sm animated landingCard\"\r\n                :class=\"{ shake: isShaking }\"\r\n                v-if=\"cards.showResetPass.value\">\r\n            <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"'loader'\" style=\"top: 50px\" />\r\n            <template>\r\n                <div class=\"text-center text-muted mb-4\">\r\n                    {{$t('login.resetPass') + \" \" + $t('login.with')}}\r\n                </div>\r\n                <form role=\"form\">                    \r\n                    <base-input alternative\r\n                                type=\"password\"\r\n                                :placeholder=\"$t('login.password')\"\r\n                                addon-left-icon=\"ni ni-lock-circle-open\"\r\n                                v-model=\"pass1\"\r\n                                @keyup.enter=\"resetPassComplete\">\r\n                    </base-input>\r\n                    <base-input alternative\r\n                                type=\"password\"\r\n                                :placeholder=\"$t('login.passwordAgain')\"\r\n                                addon-left-icon=\"ni ni-lock-circle-open\"\r\n                                v-model=\"pass2\"\r\n                                @keyup.enter=\"resetPassComplete\">\r\n                    </base-input>\r\n                    <div class=\"text-center\">\r\n                        <p :class=\"[ error ? errorClass : noErrorClass , msgClass ]\">{{message}}</p>                    \r\n                        <base-button type=\"secondary\" class=\"my-4\" @click=\"resetPassComplete\">{{$t('login.resetPass')}}</base-button>\r\n                        <div class=\"text-center\">\r\n                            <p v-if=\"error\" style=\"color: gray;\">{{$t('login.lookingTo')}} <a href=\"#\" @click=\"openRegisterModal\">{{$t('login.createAccount')}}</a></p>\r\n                            <p style=\"color: gray;\"><a href=\"#\" @click=\"openLoginModal\">{{$t('login.login')}}</a></p>\r\n                        </div>                                         \r\n                    </div>\r\n                </form>\r\n            </template>\r\n        </card>\r\n\r\n        <!-- Verify Register -->\r\n        <card type=\"secondary\"\r\n                header-classes=\"bg-white pb-5\"\r\n                body-classes=\"p-0 px-lg-5 py-lg-5\"\r\n                class=\"modal-sm animated landingCard\"\r\n                :class=\"{ shake: isShaking }\"\r\n                v-if=\"cards.showVerifyRegister.value\">\r\n            <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"'loader'\" />\r\n            <template>\r\n                <form role=\"form\">                    \r\n                    <div class=\"text-center\">\r\n                        <h4 :class=\"[ error ? errorClass : noErrorClass , msgClass ]\">{{message}}</h4>   \r\n                        <p v-if=\"error\" style=\"color: gray;\">{{$t('login.lookingTo')}} <a href=\"#\" @click=\"openRegisterModal\">{{$t('login.createAccount')}}</a></p>           \r\n                        <p style=\"color: gray;\"><a href=\"#\" @click=\"openLoginModal\">{{$t('login.login')}}</a></p>\r\n                    </div>\r\n                </form>\r\n            </template>\r\n        </card>\r\n    </SlideYUpTransition>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { SlideYUpTransition } from \"vue2-transitions\";\r\nimport DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\nimport auth from '@/custom/assets/js/auth'\r\nimport '../assets/css/shake.css'\r\n\r\nimport constants from '@/custom/assets/js/constants'\r\nimport helper from '@/custom/assets/js/helper'\r\n\r\n\r\nexport default {\r\n    components: {\r\n        SlideYUpTransition,\r\n        DualRingLoader\r\n    },\r\n    data() {\r\n      return {\r\n        cards: {\r\n            showLogin: { value: false },\r\n            showRegister: { value: false },\r\n            showResetPass: { value: false },\r\n            showVerifyRegister: { value: false }\r\n        },\r\n        loading: false,\r\n\r\n        email: '',\r\n        pass: '',\r\n        pass1: '',\r\n        pass2: '',\r\n        remember: true,\r\n        error: false,\r\n        message: '',\r\n        isShaking: false,\r\n\r\n        // css classes\r\n        msgClass: 'message',\r\n        noErrorClass: 'noError',\r\n        errorClass: 'error'\r\n      };\r\n    },\r\n    methods: {\r\n        init() {\r\n            if (!('remember' in localStorage)) {\r\n                localStorage.setItem('remember', true)\r\n            } \r\n            this.remember = JSON.parse(localStorage.remember)\r\n\r\n            auth.setCSRFToken()\r\n\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                console.log('In Dev Mode')\r\n            }\r\n        },\r\n\r\n        logIn () {\r\n            this.loading = true\r\n            auth.login(this.email, this.pass, (loggedIn, err) => {\r\n                this.error = !loggedIn\r\n                if (!loggedIn) {                    \r\n                    this.shakeModal()\r\n                    this.message = err\r\n                } else {\r\n                    auth.setCSRFToken()\r\n                    this.$store.setItem('headers', {\r\n                        headers: {\r\n                            \"Authorization\": `Basic ${window.btoa(`${this.email}:${this.pass}`)}`\r\n                        }\r\n                    })\r\n                    helper.updateStore(this.$store, 'email', this.email, 'login')\r\n                    \r\n                    this.$router.replace(this.$route.query.redirect || '/')\r\n                }\r\n            }, () => this.loading = false)\r\n        },\r\n        resetPass () {\r\n            this.loading = true\r\n            auth.resetPass(this.email, (resetted, msg) => {\r\n                this.error = !resetted\r\n                if (!resetted) {\r\n                    this.shakeModal()\r\n                }\r\n                this.message = msg\r\n            }, () => this.loading = false)\r\n        },\r\n        resetPassComplete() {\r\n            this.loading = true\r\n            auth.verifyReset(this.$route.params.uid, this.$route.params.token, this.pass1, this.pass2, (success, msg) => {\r\n                this.error = !success\r\n                if (!success) {\r\n                    this.shakeModal()\r\n                }\r\n                this.message = msg\r\n            }, () => this.loading = false)\r\n        },\r\n        register () {\r\n            this.loading = true\r\n            auth.register(this.email, this.pass1, this.pass2, (registered, msg) => {\r\n                this.error = !registered\r\n                if (!registered) {\r\n                    this.shakeModal()                    \r\n                }\r\n                this.message = msg\r\n            }, () => this.loading = false)\r\n        },\r\n\r\n        shakeModal(){\r\n            this.isShaking = true\r\n            setTimeout(() => { \r\n                this.isShaking = false\r\n            }, constants.intervals.shake );\r\n            this.pass = ''\r\n        },\r\n        \r\n        openLoginModal(){\r\n            this.openModal(this.cards.showLogin)\r\n        },\r\n        openResetPassModal(){\r\n            this.openModal(this.cards.showResetPass)\r\n        },\r\n        openRegisterModal(){\r\n            this.openModal(this.cards.showRegister)\r\n        },\r\n        openVerifyRegisterModal(success){\r\n            let msg = ''\r\n\r\n            if (success) {\r\n                msg = this.$i18n.t('login.registerSuccess')\r\n            } else {\r\n                this.shakeModal()\r\n                msg = this.$i18n.t('login.registerFail')\r\n            }\r\n            \r\n            this.openModal(this.cards.showVerifyRegister, msg, !success)\r\n        },\r\n        openResetPassModal(){\r\n            this.openModal(this.cards.showResetPass)\r\n        },\r\n        openModal(card, msg, err){\r\n            for (var otherCard in this.cards) {\r\n                if (this.cards.hasOwnProperty(otherCard)) {           \r\n                    this.cards[otherCard].value = false\r\n                }\r\n            }\r\n\r\n            this.error = err ? err : false\r\n            this.message = msg\r\n            this.email = ''\r\n            this.pass1 = ''\r\n            this.pass2 = ''\r\n\r\n            setTimeout(() => {\r\n                card.value = true  \r\n            }, constants.intervals.loginShow );\r\n        }\r\n    },\r\n    mounted() {\r\n        this.init()\r\n\r\n        if (\"key\" in this.$route.params) {\r\n            this.loading = true\r\n            auth.verifyRegister(this.$route.params.key, (success) => {  \r\n                this.openVerifyRegisterModal(success)\r\n            }, () => this.loading = false)\r\n        } else if (\"uid\" in this.$route.params && \"token\" in this.$route.params) {\r\n            this.openResetPassModal()\r\n        } else {\r\n            auth.logout()\r\n            this.$router.replace(this.$route.query.redirect || '/login')\r\n            this.openLoginModal();\r\n        }\r\n    },\r\n    watch: {\r\n        remember(val) {\r\n            localStorage.setItem('remember', val)\r\n        }\r\n    }\r\n}\r\n</script>\r\n<style>\r\n.landingCard {\r\n    margin: auto;\r\n    border-radius: 1rem;\r\n    background: #2f3668;\r\n}\r\n\r\n.message {\r\n    white-space: pre-line;\r\n}\r\n\r\n.noError {\r\n    color: gray;    \r\n}\r\n\r\n.error {\r\n  color: red !important;\r\n}\r\n\r\n.loader {\r\n  width: 80px; \r\n  height: 80px;  \r\n  position: absolute;\r\n  left: 150px;\r\n}\r\n</style>"]}]}