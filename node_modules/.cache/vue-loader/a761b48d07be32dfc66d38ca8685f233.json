{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/FSEngineering.vue?vue&type=style&index=0&id=1595aa4a&scoped=true&lang=css&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/FSEngineering.vue","mtime":1596185784860},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi53YXJuaW5nIHsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQogICAgY29sb3I6ICM2NmZmYmE7DQp9DQoNCi5ub1dhcm5pbmcgew0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBjb2xvcjogd2hpdGUNCn0NCg0KLmNvbnRhaW5lciB7DQogICAgcGFkZGluZy1yaWdodDogYXV0bzsNCiAgICBwYWRkaW5nLWxlZnQ6IGF1dG87DQogICAgbWFyZ2luLXJpZ2h0OiAyJTsNCiAgICBtYXJnaW4tbGVmdDogMiU7DQp9DQo="},{"version":3,"sources":["FSEngineering.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0XA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"FSEngineering.vue","sourceRoot":"src/custom/apps/research","sourcesContent":["<template>\r\n<div>\r\n\r\n    <div class=\"row\">\r\n        <!-- select backtest -->\r\n        <span>{{ $t(storeKey + '.selectBacktest') }}</span>\r\n        <base-dropdown class=\"dd\" \r\n                        menu-classes=\"dropdown-black\" \r\n                        title-classes=\"btn btn-secondary\"\r\n                        :title=\"selectedBacktest ? selectedBacktest.name : null\"\r\n                        style=\"width: auto\">\r\n            <ul style=\"list-style-type: none;\">\r\n                <li v-for=\"bt in btNamesFiltered\" :key=\"bt.id\">            \r\n                    <a class=\"dropdown-item\" \r\n                        @click=\"selectBacktest(bt)\" \r\n                        href=\"#\">\r\n                        {{ bt.name }}\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </base-dropdown>    \r\n    </div>\r\n\r\n    <div class=\"row\" style=\"margin\">\r\n        <!-- available models checkboxes       -->\r\n        <!-- predGroups:['.basic', '.hmm', '.hmm2', '.svjd', '.svjd2', '.cot'], -->\r\n        <card class=\"col-lg-3 col-12 container\">\r\n            <dl>\r\n                <dt>\r\n                    <input type=\"checkbox\" id=\"basic\" value=\"Basic\" v-model=\"checkedGroups\">\r\n                    <label for=\"basic\">Basic</label>\r\n                </dt>\r\n                <dt>\r\n                    <input type=\"checkbox\" id=\"hmm\" value=\"Hidden-Markov Models\" v-model=\"checkedGroups\">\r\n                    <label for=\"hmm\">Hidden-Markov Models</label>\r\n                </dt>\r\n                <dt>\r\n                    <input type=\"checkbox\" id=\"hmm2\" value=\"Hidden Markov Models Extended\" v-model=\"checkedGroups\">\r\n                    <label for=\"hmm2\">Hidden-Markov Models Extended</label>\r\n                </dt>\r\n                <dt>\r\n                    <input type=\"checkbox\" id=\"svjd\" value=\"SVJD Stationary\" v-model=\"checkedGroups\">\r\n                    <label for=\"svjd\">SVJD Stationary</label>\r\n                </dt>\r\n                <dt>\r\n                    <input type=\"checkbox\" id=\"svjd2\" value=\"SVJD Non-Stationary\" v-model=\"checkedGroups\">\r\n                    <label for=\"svjd2\">SVJD Nonstationary</label>\r\n                </dt>\r\n                <dt>\r\n                    <input type=\"checkbox\" id=\"cot\" value=\"Commitment of Traders\" v-model=\"checkedGroups\">\r\n                    <label for=\"cot\">Commitment of Traders</label>\r\n                </dt>\r\n            </dl>\r\n        </card>\r\n\r\n        <!-- date pickers -->\r\n        <card class=\"col-lg-3 col-12 container\">\r\n            <h4>{{ $t('research.period') }}</h4>\r\n            <div class=\"controls\">\r\n                <table class=\"table tablesorter\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <!-- <slot :row=\"item\"> -->\r\n                            <td class=\"fullpicker\" style=\"border-top: 0px;\">\r\n                                {{ $t('research.from') }}<br>\r\n                                <datepicker v-model=\"period.from\" \r\n                                            :clear-button=\"true\" \r\n                                            :format=\"dateFormat\" \r\n                                            :placeholder=\"$t('research.pickDate')\" />\r\n                            </td>\r\n                            <!-- </slot> -->\r\n                        </tr>\r\n                        <tr>\r\n                            <!-- <slot :row=\"item\"> -->\r\n                            <td class=\"fullpicker\" style=\"border-top: 0px;\">\r\n                                {{ $t('research.to') }}<br>\r\n                                <datepicker v-model=\"period.to\" \r\n                                            :clear-button=\"true\" \r\n                                            :format=\"dateFormat\" \r\n                                            :placeholder=\"$t('research.pickDate')\" />\r\n                            </td>\r\n                            <!-- </slot> -->\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </card>      \r\n\r\n        \r\n        <!-- modeling results -->\r\n        <card class=\"col-lg-3 col-12 container\">\r\n            <h4>{{ $t(storeKey + '.modelResults') }}</h4>\r\n            <!-- <div>\r\n                <b-table striped hover :results=\"results\"></b-table>\r\n            </div> -->\r\n        </card>\r\n\r\n        <!-- run button  -->\r\n         <div>\r\n            <base-button native-type=\"submit\" type=\"secondary\" @click=\"runStrategyClick\" style=\"margin-right: auto; margin-left:auto;\">{{ runText }}</base-button>\r\n        </div>\r\n    </div>\r\n\r\n    <!-- Results block-->   \r\n\r\n    <div class=\"row\">\r\n        <!-- equity curve -->\r\n        <div class=\"col-md\">\r\n            <fancy-chart :title=\"$t(storeKey + '.equityCurve')\"\r\n                         :showTitle='true'  \r\n                        :apiUrls=\"[tsModelEqUrl]\">\r\n            </fancy-chart>\r\n        </div>\r\n\r\n         <!-- drawdown curve -->\r\n        <div class=\"col-md\">\r\n            <fancy-chart :title=\"$t(storeKey + '.drawDown')\"\r\n                         :showTitle='true'  \r\n                        :apiUrls=\"[tsModelDDUrl]\">\r\n            </fancy-chart>\r\n        </div>\r\n          \r\n        <!-- save button  -->\r\n        <div>\r\n            <base-button native-type=\"submit\" type=\"secondary\" @click=\"saveClick\">{{ $t('research.save') }}</base-button>\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n\r\n</template>\r\n<script>\r\nimport Datepicker from 'vuejs-datepicker';\r\nimport FancyTable from '@/custom/components/Tables/FancyTable';\r\nimport FancyChart from '@/custom/components/Charts/FancyChart';\r\nimport FancyCard from '@/custom/components/Cards/FancyCard';\r\n\r\n\r\nimport helper from '@/custom/assets/js/helper';\r\nimport constants from '@/custom/assets/js/constants';\r\n\r\n// data-structure (optimisation set-up) construction\r\nconts featengParams = {\r\n    successLimit: null,\r\n    insample: null,\r\n    checkedGroups: [],\r\n}\r\n\r\nexport default {\r\n    components: {  \r\n      Datepicker,\r\n      FancyTable,\r\n      FancyChart,\r\n      FancyCard \r\n    },\r\n\r\n    props: {\r\n        title: {\r\n            type: String,\r\n            description: \"Chart title\"\r\n        },\r\n        apiUrlDD: {\r\n            type: Array,\r\n            default: () => [],\r\n            description: \"URL to drawdown API\"\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            storeKey: 'research.fsengineering.featengParams',\r\n            backtestsNames: [],\r\n            selectedBacktest: null,\r\n            featengParams: {\r\n                ...featengParams\r\n            }\r\n            // predGroups:['.basic', '.hmm', '.hmm2', '.svjd', '.svjd2', '.cot'],                    \r\n            // stopLoss: {\r\n            //     checked: true,\r\n            //     from: null,\r\n            //     to: null,\r\n            //     step: null\r\n            // },\r\n            // period: {\r\n            //     from: null,\r\n            //     to: null\r\n            // },\r\n\r\n            estimated: '5.5 hours',\r\n            warnEstimated: true,\r\n            running: false,\r\n            updateKey: 0,\r\n        }\r\n    },\r\n   \r\n    computed: {\r\n        btNamesFiltered() {\r\n            return this.selectedBacktest ? this.backtestsNames.filter(bt => bt.id !== this.selectedBacktest.id) : this.backtestsNames\r\n        },\r\n\r\n        dateFormat() {\r\n            return \"yyyy-MM-dd\"\r\n        },\r\n\r\n        runText() {\r\n            return this.running ? this.$t(this.storeKey + '.stop') : this.$t(this.storeKey + '.run')\r\n            // return this.running ? this.$t('research.stop') : this.$t(this.storeKey + '.run')\r\n        },\r\n\r\n        // tableInterval() {\r\n        //     return constants.intervals.featEngReload\r\n        // }\r\n    },\r\n\r\n    methods: {\r\n        initData() {\r\n            let data = this.$store.getItem(this.storeKey)\r\n            if (data) {\r\n                if (data.checkedGroups) {\r\n                    this.checkedGroups = data.checkedGroups\r\n                    \r\n                } else {\r\n                    this.checkedGroups = []      \r\n                }\r\n            }\r\n        },\r\n        runClick() {\r\n            if (this.running) {\r\n                this.stop()\r\n            } else {\r\n                if (this.warnEstimated) {\r\n                    this.$confirm(this.$t(this.storeKey + '.estimatedTime') + ' ' + this.$t(this.storeKey + '.confirmEstimated'))\r\n                    .then(() => {\r\n                        this.run()\r\n                    })\r\n                    .catch(() => {})\r\n\r\n                    return\r\n                }\r\n                \r\n                this.run()\r\n            }\r\n            this.runStrategyClick()\r\n        },\r\n        saveClick() {},\r\n\r\n        run() {\r\n            this.running = true\r\n\r\n        },\r\n        stop() {\r\n            this.running = false\r\n        },\r\n\r\n        runStrategyClick() {                     \r\n            if (this.loading) {\r\n                this.$notify({\r\n                                type: 'warning', \r\n                                message: this.$t('notifications.loading') + this.errorTitle\r\n                            })\r\n                return \r\n            }\r\n\r\n            let canRun = true\r\n            let btsData = this.$store.getItem(this.storeKey)\r\n        \r\n            if (canRun) {        \r\n                this.setBacktestsTable()\r\n                this.cardKey++\r\n                this.runBacktests()     \r\n            }\r\n        },\r\n\r\n        setBacktestsTable(createNew=false) {\r\n            let selectedBacktest = this.$store.getItem(this.storeKey)\r\n            let featengParams = this.$store.getItem(this.storeKey)\r\n            \r\n            if (createNew) {\r\n                if (assetsPatterns) {    \r\n                    // create new rows\r\n                    newTableData = []\r\n\r\n                        assetsPatterns.checkedAssets.forEach(asset => {\r\n                            assetsPatterns.checkedPatterns.forEach(pattern => {\r\n                                let row = new Map()     // order of properties is guaranteed so we can store only (language independent) values\r\n                                let clNr = 0\r\n\r\n                                row.set('btId', -1)\r\n                                row.set(this.columns[clNr++].toLowerCase(), null)    // Name\r\n                                row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.range && assetsPatterns.range.from \r\n                                                                            ? helper.formatDate(helper.formatDateOnly(assetsPatterns.range.from))\r\n                                                                            : null)    // From\r\n                                row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.range && assetsPatterns.range.to\r\n                                                                            ? helper.formatDate(helper.formatDateOnly(assetsPatterns.range.to))\r\n                                                                            : null)    // To\r\n                                row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.timeframe)    // Time frame                    \r\n                                row.set(this.columns[clNr++].toLowerCase(), asset.symbol)    // Asset                    \r\n                                row.set(this.columns[clNr++].toLowerCase(), pattern.name)    // Pattern\r\n\r\n                                if (this.strategy) {   \r\n                                    this.updateRow(row, clNr)                            \r\n                                }                                 \r\n\r\n                                newTableData.push(row)\r\n                            })\r\n                        })\r\n                }\r\n            } else {\r\n                newTableData.forEach(row => {\r\n                    let clNr = 4    // starting from Asset column (for the if)\r\n\r\n                    if (assetsPatterns.range && !assetsPatterns.range.to) {\r\n                        // set null To dates to today\r\n                        row.set(this.columns[clNr-2].toLowerCase(), helper.formatDate(new Date())) // To\r\n                    }\r\n                })\r\n            }\r\n\r\n            helper.updateStoreBacktests(this.$store, 'backtests', newTableData, constants.storeKeys.backtestPatterns) \r\n        },\r\n\r\n        updateRow(row, clNr) {\r\n            row.set(this.columns[clNr++].toLowerCase(), this.strategy.initialCapital ? `${this.strategy.initialCapital} ${constants.defaultUnit}` : null)    // Initial capital\r\n            row.set(this.columns[clNr++].toLowerCase(), this.strategy.analyze ? `${this.strategy.analyze} ${helper.pluralize(this.strategy.analyze, constants.translationKeys.patterns + '.bar')}` : null)    // Analyze\r\n            row.set(this.columns[clNr++].toLowerCase(), this.strategy.profit_take.value ? `${this.strategy.profit_take.value} ${this.strategy.profit_take.unit}` : null)    // Profit Target\r\n            row.set(this.columns[clNr++].toLowerCase(), this.strategy.stoploss.value ? `${this.strategy.stoploss.value} ${this.strategy.stoploss.unit}` : null)    // Stop Loss\r\n            row.set(this.columns[clNr++].toLowerCase(), this.strategy.trendFilter && this.strategy.ma_filter_period ? `${this.strategy.ma_filter_period} ${constants.defaultUnit}` : null)    // Trend filter (moving average)\r\n            row.set(this.columns[clNr++].toLowerCase(), this.strategy.direction)    // Direction\r\n            row.set('fixed_amount', this.strategy.fixed_amount)    // Risk\r\n        },\r\n\r\n        runBacktests() { \r\n            this.loading = true\r\n            let backtestsAll = helper.getStoredBacktests(this.$store.getItem(constants.storeKeys.backtestPatterns))\r\n\r\n            // run all backtests showed in Patterns table\r\n            let backtests2Run = []\r\n            backtestsAll.forEach(bt => backtests2Run.push(helper.mapStrategyFromRow(bt)))\r\n\r\n            this.$http\r\n            .post(constants.urls.patternLab.backtestPatterns.results, backtests2Run)\r\n            .then(_ => this.setCheckBacktestsInterval())\r\n            .catch(error => {\r\n                this.loading = false\r\n                console.log(error);\r\n\r\n                if (error.message === constants.strings.networkError) {\r\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n                } else {\r\n                    this.$notify({\r\n                                type: 'warning', \r\n                                message: this.$t('notifications.couldntRunBacktests') + this.errorTitle\r\n                                })\r\n                }\r\n            })        \r\n        },\r\n    },\r\n\r\n    mounted() {\r\n        \r\n    },\r\n\r\n    watch: {\r\n    //   watch and store selected backtest\r\n      selectedBacktest(val) {        \r\n        helper.updateStore(this.$store, 'selectedBacktest', val, this.storeKey)\r\n      },\r\n    //   watch and store selected predictor groups (and stringfy it)\r\n      checkedGroups: {\r\n        handler(val){\r\n          let val2store = JSON.parse(JSON.stringify(val))\r\n          helper.updateStore(this.$store, 'checkedGroups', val2store, this.storeKey) \r\n        },\r\n        deep: true\r\n      }\r\n    },\r\n}\r\n</script>\r\n<style scoped>\r\n.warning {\r\n    text-align: center;\r\n    color: #66ffba;\r\n}\r\n\r\n.noWarning {\r\n    text-align: center;\r\n    color: white\r\n}\r\n\r\n.container {\r\n    padding-right: auto;\r\n    padding-left: auto;\r\n    margin-right: 2%;\r\n    margin-left: 2%;\r\n}\r\n</style>"]}]}