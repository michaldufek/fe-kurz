{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/components/Tables/FancyTable.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/components/Tables/FancyTable.vue","mtime":1587030366030},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5sb2FkZXIgew0KICB3aWR0aDogODBweDsgDQogIGhlaWdodDogODBweDsgIA0KICBwb3NpdGlvbjogYWJzb2x1dGU7IA0KfQ0KDQoubG9hZGVyLm5vRGF0YSB7DQogIHRvcDogMjAlOyANCiAgbGVmdDogNDAlOyAgICANCn0NCg0KLmxvYWRlci5kYXRhIHsNCiAgdG9wOiA0MCU7IA0KICBsZWZ0OiA0Mi41JTsNCn0NCg=="},{"version":3,"sources":["FancyTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoRA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"FancyTable.vue","sourceRoot":"src/custom/components/Tables","sourcesContent":["<template>\r\n  <card class=\"card\">\r\n    <audio id=\"connectionLost\" src=\"media/connectionLost.mp3\" preload=\"auto\"></audio>\r\n    <h4 v-if=\"showTitle\" slot=\"header\" class=\"card-title\">{{title}}</h4>\r\n    <div>\r\n      <section v-if=\"noData\">\r\n        <h5>{{ noDataText ? noDataText : $t('noData') }}</h5>\r\n      </section>\r\n      <section v-else-if=\"isError\">\r\n        <p>{{ $t('dataError') }}</p>\r\n      </section>\r\n      <section v-else>\r\n        <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"[finishedLoadings ? dataClass : noDataClass, loaderClass]\"/>\r\n        <base-table :data=\"data.length ? data : tableData\"\r\n                    :titles=\"titles\"\r\n                    :columns=\"columns\"\r\n                    :checkboxColumns=\"checkboxColumns\"\r\n                    @checked=\"checkedEmit\"\r\n                    thead-classes=\"text-primary\"\r\n                    :sortable=\"sortable\"\r\n                    :filterable=\"filterable\"\r\n                    :editable=\"editable\"\r\n                    :clickable=\"clickable\"\r\n                    :saveable=\"saveable\"\r\n                    :allowSave=\"allowSave\"\r\n                    :savedRows=\"savedRows\"\r\n                    @edited=\"edited\"\r\n                    @filtered=\"filtered\"\r\n                    @selected=\"selected\"\r\n                    @saved=\"saved\" >\r\n        </base-table>\r\n      </section>\r\n    </div>\r\n  </card>\r\n</template>\r\n<script>\r\nimport BaseTable from './BaseTable.vue';\r\nimport DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\n\r\nimport constants from '@/custom/assets/js/constants';\r\nimport helper from '@/custom/assets/js/helper';\r\n\r\n\r\nexport default {\r\n  name: 'fancy-table',\r\n  components: {\r\n    BaseTable,\r\n    DualRingLoader    \r\n  },\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      description: \"Table title\"\r\n    },\r\n    noDataText: {\r\n      type: String,\r\n      description: \"Text to show when no data\"\r\n    },\r\n    showTitle: {\r\n      type: Boolean,\r\n      default: true,\r\n      description: \"Whether to show table title\"\r\n    },\r\n    data: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"Table data\"\r\n    },\r\n    apiUrls: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"URLs to API data sources\"\r\n    },\r\n    authorize: {\r\n      type: Boolean,\r\n      description: \"Whether connection to apiUrls must be authorized\"\r\n    },\r\n    rowsCreator: {\r\n      type: Function,\r\n      default: responseData => {\r\n        return responseData\r\n      },\r\n      description: \"How to create rows values (of shape [#rows, #columns]) from response data\"\r\n    },\r\n    aggregator: {\r\n      type: Function,\r\n      default: (oldRows, newRows, weight) => {\r\n        return helper.weightedAverageAggregator(oldRows, newRows, weight)\r\n      },\r\n      description: \"How to aggregate created rows from all sources (result of shape [#oldRows + #newRows, #columns])\"\r\n    },    \r\n    titles: {\r\n      type: Object,\r\n      default: () => {},\r\n      description: \"Table data values descriptions\"\r\n    },\r\n    columns: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"Table columns\"\r\n    },\r\n    checkboxColumns: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"Columns that are checkboxes\"\r\n    },\r\n    // interval: {\r\n    //   type: Number,\r\n    //   default: () => constants.intervals.dataReload,\r\n    //   description: \"Interval to reaload data\"\r\n    // },\r\n    sortable: {\r\n      type: Boolean,\r\n      description: \"Whether columns can be sorted by header click\"\r\n    },\r\n    filterable: {\r\n      type: Boolean,\r\n      description: \"Whether columns can be filtered by header double-click\"\r\n    },\r\n    editable: {\r\n      type: Boolean,\r\n      description: \"Whether values can be directly edited by double-click\"\r\n    },\r\n    clickable: {\r\n      type: Boolean,\r\n      description: \"Whether rows can be double-clicked for some action\"\r\n    },\r\n    saveable: {\r\n      type: Boolean,\r\n      description: \"Whether rows have Save button at last column (to do emit Save action)\"\r\n    },\r\n    allowSave: {\r\n      type: Boolean,\r\n      description: \"Whether rows can use Save button functionality\" // ie. backtest was run and row has result ID\r\n    },\r\n    savedRows: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"Table rows that are already saved\"\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      error: false,\r\n      loading: false,\r\n      tableData: [],\r\n      finishedLoadings: 0,\r\n      \r\n      // css classes\r\n      dataClass: 'data',      \r\n      noDataClass: 'noData',\r\n      loaderClass: 'loader'\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    noData() {\r\n      return !this.loading && (!this.data || !this.data.length) && !this.tableData.length\r\n    },\r\n    isError() {\r\n      return this.error\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    initData() {\r\n      if (this.data && this.data.length) {\r\n        return \r\n      }\r\n\r\n      this.loadData();\r\n        \r\n      setInterval(() => { \r\n        this.loadData();\r\n      }, constants.intervals.dataReload ); //this.interval\r\n    },\r\n\r\n    loadData() {\r\n      this.finishedLoadings = 0\r\n      let errorLoadings = 0\r\n      if (this.apiUrls && this.apiUrls.length > 0) {\r\n        this.loading = true\r\n        this.error = false\r\n      }\r\n\r\n      const loadRoutine = () => new Promise ((resolve, reject) => {           \r\n        let responses = []\r\n\r\n        if (!this.apiUrls) {\r\n          resolve(responses)\r\n        } else {\r\n          this.apiUrls.forEach(apiUrl => {\r\n            this.$http\r\n            .get(apiUrl, this.authorize ? this.$store.getItem('headers') : null)\r\n            .then(response => {\r\n              if (!this.finishedLoadings) {\r\n                this.tableData = []\r\n              }\r\n\r\n              responses.push(response)          \r\n            })\r\n            .catch(error => {\r\n              console.log(error);\r\n              if (++errorLoadings === this.apiUrls.length) {\r\n                this.error = true\r\n                reject()\r\n              }\r\n\r\n              if (error.message === constants.strings.networkError) {\r\n                helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.title + ' ' + this.$t('table') + ')')\r\n              }\r\n            })\r\n            .finally(() => {\r\n              if (++this.finishedLoadings === this.apiUrls.length) {\r\n                this.loading = false\r\n                resolve(responses)\r\n              }\r\n            });\r\n          })\r\n        }\r\n      })\r\n\r\n      loadRoutine()\r\n      .then((responses) => {\r\n        let eqOutsSum = 0\r\n        responses.forEach(response => eqOutsSum += (response.data.equity ? response.data.equity[response.data.equity.length - 1] : 0))\r\n\r\n        responses.forEach(response => {\r\n          let newTableData = [];\r\n\r\n          this.rowsCreator(response.data).forEach(rowValues => {\r\n            let row = {}\r\n            let clNr = 0\r\n\r\n            // add keys to values (ie.column names)\r\n            this.columns.forEach(column => {\r\n              row[column.toLowerCase()] = clNr > rowValues.length - 1 ? null : rowValues[clNr]\r\n              clNr++\r\n            })\r\n\r\n            newTableData.push(row);\r\n          });\r\n\r\n          // aggregation\r\n          let weight = response.data.equity ? response.data.equity[response.data.equity.length - 1] / eqOutsSum : 1\r\n          this.tableData = this.aggregator(this.tableData, newTableData, weight).slice(0, constants.maxRows)\r\n          let td = this.tableData\r\n        })\r\n      })\r\n    },\r\n\r\n    // BaseTable emited event\r\n    edited(data) {\r\n      this.$emit('edited', data)\r\n    },\r\n    checkedEmit(data) {\r\n      this.$emit('checked', data)\r\n    },\r\n    filtered(data) {\r\n      this.$emit('filtered', data)      \r\n    },\r\n    selected(data) {\r\n      this.$emit('selected', data)\r\n    },\r\n    saved(data) {\r\n      this.$emit('saved', data)\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.initData()\r\n  }\r\n};\r\n</script>\r\n<style>\r\n.loader {\r\n  width: 80px; \r\n  height: 80px;  \r\n  position: absolute; \r\n}\r\n\r\n.loader.noData {\r\n  top: 20%; \r\n  left: 40%;    \r\n}\r\n\r\n.loader.data {\r\n  top: 40%; \r\n  left: 42.5%;\r\n}\r\n</style>"]}]}