{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/featuresEngineering/ParameterSweep.vue?vue&type=style&index=0&id=6e4c2ae8&scoped=true&lang=css&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/featuresEngineering/ParameterSweep.vue","mtime":1587380262075},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLndhcm5pbmcgewogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgY29sb3I6ICM2NmZmYmE7Cn0KCi5ub1dhcm5pbmcgewogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgY29sb3I6IHdoaXRlCn0K"},{"version":3,"sources":["ParameterSweep.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyVA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"ParameterSweep.vue","sourceRoot":"src/custom/apps/research/featuresEngineering","sourcesContent":["<template>\n<div>\n\n    <div class=\"row\">\n        <!-- select backtest -->\n        <span style=\"float: left; margin: 8px 15px 30px 30px\">{{ $t(storeKey + '.selectBacktest') }}</span>\n        <base-dropdown class=\"dd\" \n                        menu-classes=\"dropdown-black\" \n                        title-classes=\"btn btn-secondary\"\n                        :title=\"selectedBacktest ? selectedBacktest.name : null\"\n                        style=\"width: 20%\">\n            <ul style=\"list-style-type: none;\">\n                <li v-for=\"bt in btNamesFiltered\" :key=\"bt.id\">            \n                    <a class=\"dropdown-item\" \n                        @click=\"selectBacktest(bt)\" \n                        href=\"#\">\n                        {{ bt.name }}\n                    </a>\n                </li>\n            </ul>\n        </base-dropdown>    \n    </div>\n\n    <div class=\"row\">\n        <!-- parameters checkboxes       -->\n        <card class=\"col-lg-3 col-12 container\">\n            <h4>{{ $t(storeKey + '.parameters') }}</h4>\n            <base-checkbox v-model=\"profitTarget.checked\">\n                {{ $t(storeKey + '.profitTarget') }}\n            </base-checkbox>\n            <base-checkbox v-model=\"stopLoss.checked\">\n                {{ $t(storeKey + '.stopLoss') }}\n            </base-checkbox>\n        </card>\n\n        <!-- date pickers -->\n        <card class=\"col-lg-3 col-12 container\">\n            <h4>{{ $t(storeKey + '.period') }}</h4>\n            <div class=\"controls\">\n                <table class=\"table tablesorter\">\n                    <tbody>\n                        <tr>\n                            <!-- <slot :row=\"item\"> -->\n                            <td class=\"fullpicker\" style=\"border-top: 0px;\">\n                                {{ $t('research.from') }}<br>\n                                <datepicker v-model=\"period.from\" \n                                            :clear-button=\"true\" \n                                            :format=\"dateFormat\" \n                                            :placeholder=\"$t('research.pickDate')\" />\n                            </td>\n                            <!-- </slot> -->\n                        </tr>\n                        <tr>\n                            <!-- <slot :row=\"item\"> -->\n                            <td class=\"fullpicker\" style=\"border-top: 0px;\">\n                                {{ $t('research.to') }}<br>\n                                <datepicker v-model=\"period.to\" \n                                            :clear-button=\"true\" \n                                            :format=\"dateFormat\" \n                                            :placeholder=\"$t('research.pickDate')\" />\n                            </td>\n                            <!-- </slot> -->\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n        </card>\n\n        <!-- Profit Target range -->\n        <card v-if=\"profitTarget.checked\" class=\"col-lg-3 col-md-12 container\">\n            <h4>{{ $t(storeKey + '.profitTarget') + ' ' + $t(storeKey + '.range') }}</h4>\n\n            <table>\n                <tr>\n                    <td style=\"width: 50%\">\n                        <p>{{ $t('research.from') }}</p>\n                    </td>\n                    <td>\n                        <base-input alternative\n                                    type=\"text\"\n                                    v-model=\"profitTarget.from\"\n                                    :placeholder=\"$t('number')\">\n                        </base-input>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <p>{{ $t('research.to') }}</p>\n                    </td>\n                    <td>\n                        <base-input alternative\n                                    type=\"text\"\n                                    v-model=\"profitTarget.to\"\n                                    :placeholder=\"$t('number')\">\n                        </base-input>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <p>{{ $t(storeKey + '.step') }}</p>\n                    </td>\n                    <td>\n                        <base-input alternative\n                                    type=\"text\"\n                                    v-model=\"profitTarget.step\"\n                                    :placeholder=\"$t('number')\">\n                        </base-input>\n                    </td>\n                </tr>\n            </table>\n        </card>\n\n        <!-- Stop Loss range -->\n        <card v-if=\"stopLoss.checked\" class=\"col-lg-3 col-md-12 container\">\n            <h4>{{ $t(storeKey + '.stopLoss') + ' ' + $t(storeKey + '.range') }}</h4>\n\n            <table>\n                <tr>\n                    <td style=\"width: 50%\">\n                        <p>{{ $t('research.from') }}</p>\n                    </td>\n                    <td>\n                        <base-input alternative\n                                    type=\"text\"\n                                    v-model=\"stopLoss.from\"\n                                    :placeholder=\"$t('number')\">\n                        </base-input>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <p>{{ $t('research.to') }}</p>\n                    </td>\n                    <td>\n                        <base-input alternative\n                                    type=\"text\"\n                                    v-model=\"stopLoss.to\"\n                                    :placeholder=\"$t('number')\">\n                        </base-input>\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <p>{{ $t(storeKey + '.step') }}</p>\n                    </td>\n                    <td>\n                        <base-input alternative\n                                    type=\"text\"\n                                    v-model=\"stopLoss.step\"\n                                    :placeholder=\"$t('number')\">\n                        </base-input>\n                    </td>\n                </tr>\n            </table>\n        </card>\n\n        <!-- estimated time of run -->\n\n    </div>\n    <!-- run button -->\n    <div class=\"row\">\n    <div class=\"col-12 flex-stretch\" style=\"margin-bottom:1em; text-align:center;\">\n        <div class=\"flex-middle\">\n            <h4 :class=\"[ warnEstimated ? 'warning' : 'noWarning' ]\">{{ $t(storeKey + '.estimatedTime') + ' ' + estimated + ' .' }}</h4>\n            <base-button native-type=\"submit\" type=\"secondary\" @click=\"runClick\" style=\"margin-right: auto; margin-left:auto;\">{{ runText }}</base-button>\n        </div>\n    </div>\n    </div>\n\n    <div class=\"row\">\n        <!-- results table -->\n        <div class=\"col-lg-8 col-md-12\">\n            <fancy-table :title=\"$t(storeKey + '.results.title')\"\n                        :showTitle=\"true\"\n                        :columns=\"$t(storeKey + '.results.columns')\">\n                        <!-- :interval=\"tableInterval\" > -->\n            </fancy-table>\n            <!-- save button -->\n            <base-button native-type=\"submit\" type=\"secondary\" @click=\"saveClick\">{{ $t('research.save') }}</base-button>\n        </div>\n\n        <!-- results chart -->\n        <div class=\"col-lg-3 col-md-12 container\">\n            <fancy-chart :title=\"$t(storeKey + '.results.chart')\" />\n        </div>\n    </div>\n\n</div>\n</template>\n<script>\nimport Datepicker from 'vuejs-datepicker';\nimport FancyTable from '@/custom/components/Tables/FancyTable';\nimport FancyChart from '@/custom/components/Charts/FancyChart';\n\nimport helper from '@/custom/assets/js/helper';\n// import constants from '@/custom/assets/js/constants';\n\n\nexport default {\n    components: {  \n      Datepicker,\n      FancyTable,\n      FancyChart \n    },\n\n    data() {\n        return {\n            storeKey: 'research.featuresEngineering.parameterSweep',\n\n            backtestsNames: [],\n            selectedBacktest: null,\n            profitTarget: {\n                checked: true,\n                from: null,\n                to: null,\n                step: null\n            },\n            stopLoss: {\n                checked: true,\n                from: null,\n                to: null,\n                step: null\n            },\n            period: {\n                from: null,\n                to: null\n            },\n\n            estimated: '5.5 hours',\n            warnEstimated: false,\n            running: false,\n\n            updateKey: 0\n        }\n    },\n\n    computed: {\n        btNamesFiltered() {\n            return this.selectedBacktest ? this.backtestsNames.filter(bt => bt.id !== this.selectedBacktest.id) : this.backtestsNames\n        },\n\n        dateFormat() {\n            return \"yyyy-MM-dd\"\n        },\n\n        runText() {\n            return this.running ? this.$t(this.storeKey + '.stop') : this.$t(this.storeKey + '.run')\n            // return this.running ? this.$t('research.stop') : this.$t(this.storeKey + '.run')\n        },\n\n        // tableInterval() {\n        //     return constants.intervals.featEngReload\n        // }\n    },\n\n    methods: {\n        initData() {\n            ({ backtestsNames:this.backtestsNames, selectedBacktest:this.selectedBacktest, updateKey:this.updateKey } = helper.getBacktestsNames(this.$store, this.storeKey, this.updateKey))\n\n            let splitted = this.estimated.split(' ')\n            this.warnEstimated = this.estimated && splitted[0] > 5 && splitted[1] === 'hours'\n        },\n\n        runClick() {\n            if (this.running) {\n                this.stop()\n            } else {\n                if (this.warnEstimated) {\n                    this.$confirm(this.$t(this.storeKey + '.estimatedTime') + ' ' + this.$t(this.storeKey + '.confirmEstimated'))\n                    .then(() => {\n                        this.run()\n                    })\n                    .catch(() => {})\n\n                    return\n                }\n                \n                this.run()\n            }\n        },\n        saveClick() {},\n\n        run() {\n            this.running = true\n\n            // let data = {}\n            // if (this.period.from) {\n            //     data['start_date'] = this.period.from\n            // }\n            // if (this.period.to) {\n            //     data['finish_date'] = this.period.to\n            // }\n            // if (this.profitTarget.checked) {\n            //     if (this.profitTarget.from) {\n            //         data['profit_take_start'] = this.profitTarget.from\n            //     }\n            //     if (this.profitTarget.to) {\n            //         data['profit_take_stop'] = this.profitTarget.to\n            //     }\n            //     if (this.profitTarget.step) {\n            //         data['profit_take_step'] = this.profitTarget.step\n            //     }\n            //     // \"profit_take_unit\": \"USD\",\n            // }\n            // if (this.stopLoss.checked) {\n            //     if (this.stopLoss.from) {\n            //         data['stop_loss_start'] = this.stopLoss.from\n            //     }\n            //     if (this.stopLoss.to) {\n            //         data['stop_loss_stop'] = this.stopLoss.to\n            //     }\n            //     if (this.stopLoss.step) {\n            //         data['stop_loss_step'] = this.stopLoss.step\n            //     }\n            //     // \"stop_loss_unit\": \"USD\"\n            // }\n            // // \"origin_result\": 0,\n\n            // this.$http\n            // .post(constants.urls.featEng.sweepRequest, data)\n            // .then(_ => this.running = true)\n            // .catch(error => {\n            //     console.log(error);\n            //     if (error.message === constants.strings.networkError) {\n            //         helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\n            //     }\n            // })\n        },\n        stop() {\n            this.running = false\n        }\n    },\n\n    mounted() {\n        this.initData()\n    },\n\n    watch: {\n      selectedBacktest(val) {        \n        helper.updateStore(this.$store, 'selectedBacktest', val, this.storeKey)\n      }\n    },\n}\n</script>\n<style scoped>\n.warning {\n    text-align: center;\n    color: #66ffba;\n}\n\n.noWarning {\n    text-align: center;\n    color: white\n}\n</style>"]}]}