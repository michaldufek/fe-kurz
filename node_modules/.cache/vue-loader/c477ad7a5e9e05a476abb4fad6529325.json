{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/components/AssetsPatternsPicker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/components/AssetsPatternsPicker.vue","mtime":1587030366018},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AssetsPatternsPicker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AssetsPatternsPicker.vue","sourceRoot":"src/custom/components","sourcesContent":["<template>\n    <card>\n    <div class=\" row xl-flex\">\n        <audio id=\"connectionLost\" src=\"media/connectionLost.mp3\" preload=\"auto\"></audio>\n\n        <div class=\"col-12 col-xl-4\"  style=\"min-width: 300px;\" v-if=\"showDatePickers\">\n            <!-- timeframe dropdown -->\n            <div :style=\"'position: relative; left: ' + tfLeftPos + 'px; z-index: 1' + (tfLeftPos === defaultTfLeftPos ? '' : '; top: 10px')\">\n                <base-dropdown class=\"dd\" \n                               menu-classes=\"dropdown-black\" \n                               title-classes=\"btn btn-secondary\"\n                               :title=\"timeframe\">\n                    <ul style=\"list-style-type: none;\">\n                        <li v-for=\"tframe in $t('research.patternLab.timeframes').filter(el => el !== timeframe)\">            \n                            <a class=\"dropdown-item\" \n                               @click=\"selectTimeframe(tframe)\" \n                               href=\"#\">\n                               {{ tframe }}\n                            </a>\n                        </li>\n                    </ul>\n                </base-dropdown>\n            </div>\n\n            <!-- date pickers -->\n            <div class=\"col-xs-3\" :style=\"'position: relative' + (tfLeftPos === defaultTfLeftPos ? '' : '')\">\n                <div class=\"controls\">\n                            <div>\n                                <!-- <slot :row=\"item\"> -->\n                                <div>{{ $t('research.from') }}<datepicker v-model=\"range.from\" \n                                                :disabled-dates=\"disabledDatesFrom\" \n                                                :clear-button=\"true\" \n                                                :format=\"dateFormat\" \n                                                :placeholder=\"$t('research.pickDate')\" />\n                                </div>\n                                <!-- </slot> -->\n                            </div>\n                            <div>\n                                <!-- <slot :row=\"item\"> -->\n                                <div>{{ $t('research.to') }}<datepicker v-model=\"range.to\" \n                                                :disabled-dates=\"disabledDatesTo\" \n                                                :clear-button=\"true\" \n                                                :format=\"dateFormat\" \n                                                :placeholder=\"$t('research.pickDate')\" />\n                                </div>\n                                <!-- </slot> -->\n                            </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- assets -->\n        <div class=\"col-12 col-xl-4\" style=\"text-align: center;\">\n            <label>{{ $t('research.patternLab.assets') }}</label>\n            <Dropdown :options=\"assets\"\n                      :disabled=\"false\"\n                      name=\"ddAssets\"\n                      :maxItem=\"maxItems\"\n                      :placeholder=\"$t('research.patternLab.type2search')\"\n                      @filter=\"getAssets\"\n                      @selected=\"ddSelectAsset\">\n            </Dropdown>\n            <base-table :data=\"selectedAssets\" :columns=\"[ 'symbol', 'name' ]\">\n                <template slot=\"columns\">\n                    <th></th>\n                    <th></th>\n                </template>  \n                <template slot-scope=\"{row}\">\n                    <div class=\"regrow\">\n                        <td style=\"border: none\">\n                            <input v-if=\"oneAssetLimit\" type=\"radio\" :id=\"row.id\" :value=\"row\" v-model=\"checkedAsset\">\n                            <input v-else type=\"checkbox\" :id=\"row.id\" :value=\"row\" v-model=\"checkedAssets\">\n                        </td>\n                        <td style=\"border: none; color:white;margin: 0 1em; display: inline-block;\">{{row.symbol}}</td>\n                        <td style=\"border: none; border-left: 1px; text-align: left\">{{row.name}}</td>\n                    </div>\n                    <td class=\"td-actions text-right\" style=\"border: none\">                        \n                        <base-button size=\"sm\" icon @click=\"removeAsset(row)\" style=\"height: 1rem;width: 1rem;min-width: 1rem;font-size: 0.5rem;\">\n                            <i class=\"tim-icons icon-simple-remove\"></i>\n                        </base-button>\n                    </td>\n                </template>    \n            </base-table>\n        </div>\n\n        <!-- patterns -->\n        <div class=\"col-12 col-xl-4\" style=\"text-align: center;\">\n            <label>{{ $t('research.patternLab.patterns') }}</label>\n            <Dropdown :options=\"patterns\"\n                      :disabled=\"false\"\n                      name=\"ddPatterns\"\n                      :maxItem=\"maxItems\"\n                      :placeholder=\"$t('research.patternLab.type2search')\"\n                      @filter=\"getPatterns\"\n                      @selected=\"ddSelectPattern\">\n            </Dropdown>\n            <ul style=\"list-style-type: none; text-align: left; margin-top: 15px; padding-left: 0px\">\n                <li v-if=\"selectedPatterns.length\" :title=\"checkedAllPatterns ? $t('research.patternLab.uncheckAll') : $t('research.patternLab.checkAll')\">   \n                    <input type=\"checkbox\" @click=\"checkAllPatterns\" v-model=\"checkedAllPatterns\">\n                </li>\n                <li v-for=\"selectedPattern in selectedPatterns\">   \n                    <input type=\"checkbox\" :id=\"selectedPattern.id\" :value=\"selectedPattern\" v-model=\"checkedPatterns\">\n                    <label :for=\"selectedPattern.id\" style=\"margin-left: 10px\">{{ selectedPattern.name }}</label>\n                </li>\n            </ul> \n        </div>\n\n        </div>\n        <!-- Add button -->\n        <div class=\"button-wrap\">\n            <base-button native-type=\"submit\" type=\"secondary\" @click=\"btnClick\" style=\"width: 300px\">{{ btnText }}</base-button>\n        </div>\n    </card>\n</template>\n<script>\nimport Datepicker from 'vuejs-datepicker';\nimport Dropdown from 'vue-simple-search-dropdown';\nimport { BaseTable } from '@/components'\n\nimport constants from '@/custom/assets/js/constants';\nimport helper from '@/custom/assets/js/helper';\n\n\nexport default {\n    name: 'assets-patterns-picker',\n    components: {  \n      Datepicker,   \n      Dropdown,\n      BaseTable   \n    },\n    props: {\n        title: {\n            type: String,\n            description: \"Title used in errors\"\n        },\n        oneAssetLimit: {\n            type: Boolean,\n            description: \"Whether only one asset can be checked\"\n        },\n        showDatePickers: {\n            type: Boolean,\n            default: true,\n            description: \"Whether datepickers (and timeFrame dropdown) section should be showed\"\n        },\n        tfLeftPos: {\n            type: Number,\n            default: 0,\n            description: \"Position of timeFrame dropdown from left in pixels\"\n        },\n        btnText: {\n            type: String,\n            description: \"Text of main submit button\"\n        }\n    },\n\n    data() {\n        return {\n            defaultTfLeftPos: 0,\n            timeframe: this.$t('research.patternLab.timeframes')[0],\n\n            // datepickers\n            range: {\n                from: null,\n                to: null\n            },\n\n            // assets\n            disabledDatesAsset: null,            \n            selectedAssets: [],\n            checkedAssets: [],\n            checkedAsset: null, // only used when oneAssetLimit is true\n            assets: [],\n\n            // patterns\n            selectedPatterns: [],\n            checkedPatterns: [],\n            checkedAllPatterns: false,\n            patterns: []\n        }\n    },\n\n    computed: {\n        dateFormat() {\n            return \"yyyy-MM-dd\"\n        },\n        disabledDatesFrom() {\n            return {\n                from: this.disabledDatesAsset \n                      ? (this.range.to ? new Date(Math.min(this.range.to, this.disabledDatesAsset.from)) \n                      : this.disabledDatesAsset.from) : this.range.to,\n                to: this.disabledDatesAsset ? this.disabledDatesAsset.to : null\n            }\n        },\n        disabledDatesTo() {\n            return {\n                from: this.disabledDatesAsset ? this.disabledDatesAsset.from : null,\n                to: this.disabledDatesAsset \n                    ? (this.range.from ? new Date(Math.max(this.range.from, this.disabledDatesAsset.to)) \n                    : this.disabledDatesAsset.to) : this.range.from\n            }\n        },\n        maxItems() {\n            return constants.maxRows\n        },\n    },\n\n    methods: {\n        initData() {\n            let data = helper.getAssetsPatternsPickerData(this.$store)\n            if (data) {\n                ({ timeframe:this.timeframe, selectedAssets:this.selectedAssets, checkedAssets:this.checkedAssets, \n                   checkedAsset:this.checkedAsset, selectedPatterns:this.selectedPatterns, checkedPatterns:this.checkedPatterns, \n                   checkedAllPatterns:this.checkedAllPatterns } \n                = data)\n                this.range = { \n                    from: helper.deformatDate(data.range.from),\n                    to: helper.deformatDate(data.range.to)\n                }\n            }\n        },\n\n        selectTimeframe(timeframe) {\n            this.timeframe = timeframe\n            helper.updateStore(this.$store, 'timeframe', this.$t('research.patternLab.timeframes').indexOf(this.timeframe))\n            this.$emit('timeframeChanged')\n        },\n\n        // selecting asset/patterns\n        ddSelectAsset(asset) {\n            if (!('id' in asset)) {\n                return\n            }\n\n            this.ddSelect(asset, asset => asset.id, this.selectedAssets)\n\n            if (this.oneAssetLimit) {\n                this.checkedAsset = asset\n            } else {\n                this.ddSelect(asset, asset => asset.id, this.checkedAssets)\n            }\n        },\n        ddSelectPattern(pattern) {\n            if (!('id' in pattern)) {\n                return\n            }\n\n            this.ddSelect(pattern, pattern => pattern.id, this.selectedPatterns)\n            this.ddSelect(pattern, pattern => pattern.id, this.checkedPatterns)\n\n            if (this.checkedAllPatterns) {  // works only in debug - why?\n                this.checkedAllPatterns = false\n            } else if (this.checkedPatterns.length === this.selectedPatterns.length) {\n                this.checkedAllPatterns = true\n            }\n        },\n        ddSelect(item, itemKeySelector, selectedItems) {\n            if (!selectedItems.map(itemKeySelector).includes(itemKeySelector(item))) {\n                selectedItems.push(item)\n            }\n        },\n\n        removeAsset(asset) {\n            this.selectedAssets.splice(this.selectedAssets.map(sa => sa.symbol).indexOf(asset.symbol), 1);\n\n            // remove also checked asset\n            if (this.oneAssetLimit) {\n                if (this.checkedAsset && this.checkedAsset.id === asset.id) {\n                    if (this.selectedAssets.length) {\n                        this.checkedAsset = this.selectedAssets[0]\n                    } else {\n                        this.checkedAsset = null                    \n                    }\n                }\n            } else if (this.checkedAssets.map(a => a.symbol).includes(asset.symbol)) {                \n                this.checkedAssets.splice(this.checkedAssets.map(a => a.symbol).indexOf(asset.symbol), 1)                \n            }\n\n            // if only checked asset was removed\n            if (!this.checkedAssets.length && this.selectedAssets.length) {\n                this.checkedAssets.push(this.selectedAssets[0])                \n            }\n        },\n        updateDisabledDatesAsset() {\n            this.disabledDatesAsset = null\n            let fromChanged = false\n            let toChanged = false\n            let checkedAssets = this.oneAssetLimit ? (this.checkedAsset ? [ this.checkedAsset ] : []) : this.checkedAssets\n\n            checkedAssets.forEach(asset => {\n                this.$http\n                .get(helper.getPatternLabChartUrl(asset, this.timeframe)) // to-do: cache this result !\n                .then(response => {\n                    let newFrom = new Date(Math.max(...Object.keys(response.data.Close)))    // maximum asset date !                    \n                    let newTo = new Date(Math.min(...Object.keys(response.data.Close)))       // minimum asset date !\n\n                    this.disabledDatesAsset = {\n                        from: new Date(this.disabledDatesAsset ? Math.min(this.disabledDatesAsset.from, newFrom) : newFrom),\n                        to: new Date(this.disabledDatesAsset ? Math.max(this.disabledDatesAsset.to, newTo) : newTo)\n                    }\n                })\n                .catch(error => {\n                    console.log(error);\n                    \n                    if (error.message === constants.strings.networkError) {\n                        helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.$t('sidebar.patternLab') + ')')\n                    }\n                })\n                .finally(() => {\n                    if (this.range.from && (this.range.from < this.disabledDatesAsset.to || this.range.from > this.disabledDatesAsset.from)) {\n                        this.range.from = this.disabledDatesAsset.to\n\n                        if (!fromChanged) {\n                            this.$notify({\n                                type: 'warning', \n                                message: this.$t('notifications.fromChanged') + ' (' + this.$t('sidebar.patternLab') + ' ' + this.$t('research.patternLab.chart.title') + ').'\n                            })\n                            fromChanged = true\n                        }\n                    }\n                    if (this.range.to && (this.range.to > this.disabledDatesAsset.from || this.range.to < this.disabledDatesAsset.to)) {\n                        this.range.to = this.disabledDatesAsset.from\n\n                        if (!toChanged) {\n                            this.$notify({\n                                type: 'warning', \n                                message: this.$t('notifications.toChanged') + ' (' + this.$t('sidebar.patternLab') + ' ' + this.$t('research.patternLab.chart.title') + ').'\n                            })\n                            toChanged = true\n                        }\n                    }\n                })\n            })\n        },\n        getAssets(query) {\n            // to-do: eliminate component's bug - redudant call for selected item\n            if (query) {\n                this.$http\n                .get(constants.urls.patternLab.asset + query)\n                .then(response => {\n                    this.assets = response.data.results\n                                .filter(result => !this.selectedAssets.map(sa => sa.symbol).includes(result.symbol))\n                                .map(result => {                                     \n                                    return {\n                                        id: result.id, \n                                        symbol: result.symbol,\n                                        name: result.name ? result.name : result.symbol\n                                    }\n                                })\n                })\n                .catch(error => {\n                    console.log(error);\n                    \n                    if (error.message === constants.strings.networkError) {\n                        helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.$t('sidebar.patternLab') + ')')\n                    }\n                })\n                .finally(() => {})\n            }\n        },\n\n        checkAllPatterns() {\n            if (this.checkedAllPatterns) {\n                this.checkedPatterns = []\n            } else {          \n                this.checkedPatterns = this.selectedPatterns          \n            }\n        },\n        getPatterns(query) {\n            // to-do: eliminate component's bug - redudant call for selected item        \n            if (query) {\n                this.$http\n                .get(constants.urls.patternLab.pattern + query)\n                .then(response => {\n                    this.patterns = response.data.filter(result => !this.selectedPatterns.map(sp => sp.name).includes(result.name))\n                })\n                .catch(error => {\n                    console.log(error);\n                    \n                    if (error.message === constants.strings.networkError) {\n                        helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.$t('sidebar.patternLab') + ')')\n                    }\n                })\n                .finally(() => {})\n            }\n        },\n\n        btnClick() {\n            if ((!this.oneAssetLimit && !this.checkedAssets.length) || (this.oneAssetLimit && !this.checkedAsset)) {\n                this.$notify({\n                    type: 'warning', \n                    message: this.$t('notifications.addNoAsset') + ' (' + this.$t('sidebar.patternLab') + ' ' + this.title + ').'\n                })    \n\n                return\n            }\n            \n            if (!this.checkedPatterns.length) {\n                this.$notify({\n                    type: 'warning', \n                    message: this.$t('notifications.addNoPattern') + ' (' + this.$t('sidebar.patternLab') + ' ' + this.title + ').'\n                })  \n            }\n\n            this.$emit('btnClicked')\n        }\n    },\n\n    mounted() {\n      this.initData()\n    },\n\n    watch: {\n        range: {\n            handler(val){\n                helper.updateStore(this.$store, 'range', { from: helper.formatDate(val.from, ''), to: helper.formatDate(val.to, '') }) \n            },\n            deep: true\n        },\n\n        // assets\n        selectedAssets(value) {\n            helper.updateStore(this.$store, 'selectedAssets', value)            \n        },\n        checkedAssets(value) {\n            helper.updateStore(this.$store, 'checkedAssets', value) \n            this.updateDisabledDatesAsset()\n        },\n        checkedAsset(value) {\n            helper.updateStore(this.$store, 'checkedAsset', value) \n            this.updateDisabledDatesAsset()\n        },\n\n        // patterns\n        selectedPatterns(value) {\n            helper.updateStore(this.$store, 'selectedPatterns', value)            \n        },\n        checkedPatterns(value) {\n            helper.updateStore(this.$store, 'checkedPatterns', value)            \n        },\n        checkedAllPatterns(value) {\n            helper.updateStore(this.$store, 'checkedAllPatterns', value)            \n        }\n    }\n}\n</script>\n<style>\n\n</style>"]}]}