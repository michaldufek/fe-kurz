{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/components/Charts/FancyChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/components/Charts/FancyChart.vue","mtime":1587730134662},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["FancyChart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"FancyChart.vue","sourceRoot":"src/custom/components/Charts","sourcesContent":["<template>\r\n  <card type=\"chart\">\r\n    <audio id=\"connectionLost\" src=\"media/connectionLost.mp3\" preload=\"auto\"></audio>\r\n    <div class=\"card-header\">\r\n      <h4 v-if=\"showTitle\" slot=\"header\" class=\"card-title\" style=\"float: left; margin-bottom: 20px\">{{title}}</h4>\r\n      <span v-if=\"legend\" v-html=\"legend\" />\r\n      <h5 v-if=\"!noData\" class=\"card-title\" style=\"float: right;\"><i class=\"tim-icons icon-heart-2\" :class=\"{ 'text-success': live }\" style=\"color:red\"></i>  {{ updateTs | chartUpdateTsText(loading) }}</h5>\r\n    </div>\r\n    <br/>\r\n    <div class=\"chart-area\" style=\"height: 425px\">\r\n      <section v-if=\"noData\" style=\"text-align: center\">\r\n        <p style=\"padding-top: 50px\">{{ noDataText ? noDataText : $t('noData') }}</p>\r\n      </section>\r\n      <section v-else-if=\"isError\" style=\"text-align: center\">\r\n        <p style=\"padding-top: 50px\">{{ $t('dataError') }}</p>\r\n      </section>\r\n      <section v-else>\r\n        <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" style=\"width: 80px; height: 80px; position: absolute; top: 40%; left: 45%;\" />\r\n        <line-chart v-if=\"responsive\"\r\n                    :chart-data=\"chartData\"\r\n                    :gradient-colors=\"bigLineChart.gradientColors\"\r\n                    :gradient-stops=\"bigLineChart.gradientStops\"\r\n                    :extra-options=\"extraOptions\"\r\n                    :height=\"null\"\r\n                    :width=\"null\">\r\n        <!-- height and width nulls is workaround of responsiveness library bug - will be fixed in vue-chartjs v4.0.0 (added as milestone) -->\r\n        </line-chart>\r\n        <line-chart v-else\r\n                    :chart-data=\"chartData\"\r\n                    :gradient-colors=\"bigLineChart.gradientColors\"\r\n                    :gradient-stops=\"bigLineChart.gradientStops\"\r\n                    :extra-options=\"extraOptions\">                    \r\n        </line-chart>\r\n      </section>\r\n    </div>\r\n  </card>\r\n</template>\r\n<script>\r\nimport LineChart from '@/components/Charts/LineChart';\r\nimport * as chartConfigs from '@/components/Charts/config';\r\nimport DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\n\r\nimport config from '@/config';\r\nimport helper from '@/custom/assets/js/helper';\r\nimport constants from '@/custom/assets/js/constants';\r\n\r\nconst defaultPointRadius = 4\r\nconst highlightPointRadius = 10\r\nconst defaultPointStyle = 'circle'\r\nconst highlightPointStyle = 'triangle'\r\nconst defaultDatasets = {\r\n  borderColor: config.colors.primary,\r\n  borderWidth: 2,\r\n  borderDash: [],\r\n  borderDashOffset: 0.0,\r\n  pointBackgroundColor: config.colors.primary,\r\n  pointBorderColor: 'rgba(255,255,255,0)',\r\n  pointHoverBackgroundColor: config.colors.primary,\r\n  pointBorderWidth: 20,\r\n  pointHoverRadius: 4,\r\n  pointHoverBorderWidth: 15,\r\n  pointRadius: [],\r\n  pointStyle: []\r\n}\r\n\r\n\r\nexport default {\r\n  name: \"fancy-chart\",\r\n  components: {\r\n    LineChart,\r\n    DualRingLoader\r\n  },\r\n\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      description: \"Chart title\"\r\n    },\r\n    legend: {\r\n      type: String,\r\n      description: \"Chart legend\"\r\n    },  // workaround because trades legend cannot be done correctly in chart.js\r\n    showTitle: {\r\n      type: Boolean,\r\n      description: \"Whether to show chart title\"\r\n    },\r\n    axesLabels: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"Labels of chart axes\"\r\n    },\r\n    apiUrls: {\r\n      type: Array,\r\n      default: () => [],\r\n      description: \"URLs to API data sources\"\r\n    },\r\n    dataFields: {\r\n      type: Array,\r\n      default: () => {\r\n        return [ 'Close' ]\r\n      },\r\n      description: \"Response data fields to use for distinctive lines in chart\"      \r\n    },\r\n    dataCreator: {\r\n      type: Function,\r\n      default: responseData => {\r\n        return responseData\r\n      },\r\n      description: \"How to create data (object of type { time: [Array], equity: [Array], WARNING: [String], report_timestamp: [Date] }) from response data\"\r\n    },\r\n    noDataText: {\r\n      type: String,\r\n      description: \"Text to show when no data\"\r\n    },\r\n    fill: {\r\n      type: Boolean,\r\n      description: \"Whether to fill area above/below line\"\r\n    },\r\n    highlights: {\r\n      type: Array,\r\n      default: () => {\r\n        return [{ \r\n          points: [], \r\n          color: config.colors.primary \r\n        }]\r\n      },\r\n      description: \"Points that should be highlighted with big triangle of defined color\"\r\n    },\r\n    responsive: {\r\n      type: Boolean,\r\n      description: \"Whether chart height should scale by parent height\"\r\n    }\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      updateTs: null,\r\n      live: false,\r\n      error: false,\r\n      loading: false,\r\n\r\n      // chart\r\n      bigLineChart: {\r\n          gradientColors: config.colors.gradients.primaryGradient,\r\n          gradientStops: [1, 0.4, 0],\r\n      },\r\n      chartData: {\r\n        datasets: [{\r\n          ...defaultDatasets,\r\n          data: []\r\n        }],\r\n        labels: []      \r\n      },\r\n      chartMins: [],\r\n      chartMaxes: []\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    noData() {\r\n      return !this.loading && (!this.chartData.datasets.length || !this.chartData.datasets[0].data.length)\r\n    },\r\n    isError() {\r\n      return this.error\r\n    },\r\n    extraOptions() {\r\n      let eOp = JSON.parse(JSON.stringify(chartConfigs.purpleChartOptions))   // deep clone\r\n\r\n      let dfNr = 0\r\n      this.dataFields.forEach(field => {        \r\n        eOp.scales.yAxes[dfNr].id = field\r\n        eOp.scales.yAxes[dfNr].position = dfNr === 0 ? 'left' : 'right'\r\n        eOp.scales.yAxes[dfNr].ticks.suggestedMin = this.chartMins[dfNr]\r\n        eOp.scales.yAxes[dfNr].ticks.suggestedMax = this.chartMaxes[dfNr]\r\n      })\r\n\r\n      eOp.scales.xAxes[0].scaleLabel = {\r\n        display: this.axesLabels.length > 0,\r\n        labelString: this.axesLabels[0]\r\n      }\r\n      eOp.scales.yAxes[0].scaleLabel = {\r\n        display: this.axesLabels.length > 0,\r\n        labelString: this.axesLabels[1]\r\n      }\r\n\r\n      return eOp\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    initData() {\r\n      this.loadData();\r\n        \r\n      setInterval(() => { \r\n        this.loadData();\r\n      }, constants.intervals.dataReload );\r\n    },\r\n\r\n    nearestValue(label, labels, data) {\r\n      // finds label's value or nearest left neighbour\r\n      let val = 0\r\n      let i = 0\r\n\r\n      labels.forEach(oldLabel => {\r\n        if (label === oldLabel) {\r\n          // label is from this array\r\n          val = data[i]\r\n        } else if (label > oldLabel) {\r\n          // we are in another array so get last known value\r\n          if (i === labels.length - 1) {\r\n            // at the end of array\r\n            val = data[i]\r\n          } else if (label < labels[i+1]) {            \r\n            val = data[i]\r\n          }\r\n        }\r\n        // otherwise iterate further\r\n        i++\r\n      })\r\n\r\n      return val\r\n    },\r\n\r\n    loadData() {  \r\n      let loadings = {    \r\n        finished: 0,\r\n        error: 0\r\n      }\r\n      if (this.apiUrls.length > 0) {\r\n        this.loading = true\r\n        this.error = false\r\n      }\r\n\r\n      this.apiUrls.forEach(apiUrl => {\r\n        this.$http\r\n        .get(apiUrl)\r\n        .then(response => this.responseDataTransformer(response.data, loadings))\r\n        .catch(error => {\r\n          // console.log(error)\r\n          if (++loadings.error === this.apiUrls.length) {\r\n            this.error = true\r\n          }\r\n\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.$t('notifications.beConnectionLost') + '(' + this.title + ' ' + this.$t('chart') + ')')\r\n          }\r\n        })\r\n        .finally(() => {\r\n          if (++loadings.finished === this.apiUrls.length) {\r\n            this.loading = false\r\n\r\n            if (!this.live && !this.error) {\r\n              helper.notifyAudio(this, document.getElementById('connectionLost'), 'warning', this.$t('notifications.brokerConnectionLost') + '(' + this.title + ' ' + this.$t('chart') + ')')\r\n            }\r\n          }\r\n        });\r\n      })\r\n    },\r\n    responseDataTransformer(responseData, loadings=null) {\r\n      if (!loadings || !loadings.finished) {\r\n        let datasets = []\r\n        this.dataFields.forEach(_ => datasets.push({\r\n          ...defaultDatasets,\r\n          data: []\r\n        }))\r\n\r\n        this.chartData = {\r\n          datasets: datasets,\r\n          labels: []\r\n        } \r\n      }\r\n\r\n      responseData = this.dataCreator(responseData)\r\n\r\n      if (responseData && !responseData.time) {\r\n        // data in ticker symbol format\r\n        let times = []\r\n        let equities = []\r\n        let firstTime = true\r\n\r\n        this.dataFields.forEach(field => {\r\n          let fieldEquities = []\r\n\r\n          if (field in responseData) {\r\n            for (const [key, value] of Object.entries(responseData[field])) {\r\n              if (firstTime) {\r\n                // times are same for all price fields\r\n                times.push(Number(key))\r\n              }\r\n              fieldEquities.push(value)\r\n            }\r\n          }\r\n\r\n          equities.push(fieldEquities)\r\n          firstTime = false\r\n        })            \r\n\r\n        var data = {\r\n          time: times,\r\n          equity: equities,\r\n          WARNING: null,\r\n          report_timestamp: helper.formatDateTime(times[times.length - 1])\r\n        }\r\n      } else {\r\n        data = {\r\n          time: responseData ? responseData.time : [],\r\n          equity: responseData ? [ responseData.equity ] : [],\r\n          WARNING: responseData ? responseData.WARNING : null,\r\n          report_timestamp: responseData ? responseData.report_timestamp || helper.formatDateTime(responseData.time[responseData.time.length - 1]) : null\r\n        }\r\n      }\r\n\r\n      this.createChartData(data)\r\n\r\n      // if at least one source is live we are live\r\n      this.live = this.live || !data.WARNING\r\n\r\n      if (!this.updateTs) {\r\n        this.updateTs = data.report_timestamp\r\n      }\r\n      // get last report's TimeStamp\r\n      this.updateTs = [this.updateTs, data.report_timestamp].sort()[1] \r\n    },\r\n    \r\n    createChartData(data) {\r\n      let datasets = []\r\n      let datasetNr = 0\r\n\r\n      let dataTimes = helper.formatDateTimes(data.time)\r\n      let allLabels = this.chartData.labels.concat(dataTimes)\r\n      \r\n      data.equity.forEach(equity => {\r\n        // add new dates and sort it\r\n        let allData = []\r\n        // aggregate values for all dates\r\n        allLabels.forEach(label => {\r\n          let aggValue = this.nearestValue(label, this.chartData.labels, this.chartData.datasets[datasetNr].data)\r\n                          + this.nearestValue(label, dataTimes, equity)\r\n\r\n          // add to final data array\r\n          allData.push(aggValue)\r\n        })\r\n\r\n        if (Math.min(...allData) < this.chartMins[datasetNr]) {\r\n          this.chartMins[datasetNr] = Math.min(...allData)\r\n        }        \r\n        if (Math.max(...allData) > this.chartMaxes[datasetNr]) {\r\n          this.chartMaxes[datasetNr] = Math.max(...allData)\r\n        }\r\n        // to-do: fix extraOptions recomputation\r\n\r\n        let datasetSetting = JSON.parse(JSON.stringify(defaultDatasets))    // deep clone\r\n        let defColor = Object.values(config.colors)[datasetNr % Object.values(config.colors).length]      \r\n        datasetSetting.borderColor = defColor\r\n\r\n        if (this.highlights[0].points.length) {   // probably not possible to be only stop losses or trade exits\r\n          datasetSetting.pointBackgroundColor = context => {  // https://www.chartjs.org/docs/latest/general/options.html#scriptable-options\r\n            let label = new Date(allLabels[context.dataIndex]).getTime()            \r\n            let color = defColor\r\n\r\n            this.highlights.forEach(highlight => {\r\n              if (highlight.points.includes(label)) {\r\n                color = highlight.color\r\n              }\r\n            })\r\n            return color\r\n          }\r\n\r\n          datasetSetting.pointRadius = context => {\r\n            let label = new Date(allLabels[context.dataIndex]).getTime()\r\n            let radius = defaultPointRadius\r\n\r\n            this.highlights.forEach(highlight => {\r\n              if (highlight.points.includes(label)) {\r\n                radius = highlightPointRadius\r\n              }\r\n            })\r\n            return radius\r\n          }\r\n\r\n          datasetSetting.pointStyle = context => {\r\n            let label = new Date(allLabels[context.dataIndex]).getTime()\r\n            let style = defaultPointStyle\r\n\r\n            this.highlights.forEach(highlight => {\r\n              if (highlight.points.includes(label)) {\r\n                style = highlightPointStyle\r\n              }\r\n            })\r\n            return style\r\n          }\r\n        }\r\n        \r\n        datasetSetting.pointHoverBackgroundColor = defColor\r\n        \r\n        let dataset = {\r\n          ...datasetSetting,\r\n          data: allData\r\n        }\r\n        if (this.fill) {\r\n          dataset['backgroundColor'] = config.colors.primary\r\n        }\r\n        if (allData.length > 0 && this.dataFields.length > 1) {\r\n          dataset.label = this.dataFields[datasetNr++]\r\n        } \r\n\r\n        datasets.push(dataset)\r\n      })    \r\n      \r\n      this.chartData = {\r\n        datasets: datasets,\r\n        labels: allLabels\r\n      }       \r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.dataFields.forEach(_ => {\r\n      this.chartMins.push(Number.MAX_VALUE)\r\n      this.chartMaxes.push(0)\r\n    })    \r\n\r\n    this.initData();\r\n  }\r\n};\r\n</script>\r\n<style>\r\n</style>"]}]}