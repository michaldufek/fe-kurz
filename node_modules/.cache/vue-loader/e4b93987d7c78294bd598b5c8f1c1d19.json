{"remainingRequest":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/BacktestPatterns.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/dufek/Documents/gitlab/frs-apps/src/custom/apps/research/patternLab/BacktestPatterns.vue","mtime":1593769852986},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/dufek/Documents/gitlab/frs-apps/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["BacktestPatterns.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BacktestPatterns.vue","sourceRoot":"src/custom/apps/research/patternLab","sourcesContent":["<template>\r\n  <div class=\"row\">\r\n\r\n    <div class=\"col-xl-12 col-12 col-md-6 container\">\r\n      <assets-patterns-picker :title=\"$t('research.patternLab.backtestPatterns.title')\"\r\n                              :btnText=\"$t('research.patternLab.backtestPatterns.addPattern')\" \r\n                              @btnClicked=\"addPattern\" />\r\n    </div>\r\n\r\n    <!-- strategy settings  -->\r\n    <div class=\"col-md-6 container col-12 col-xl-3\" style=\"margin-left: 0px\">\r\n      <card>\r\n        <!-- initial capital -->\r\n        <div>\r\n          <p class=\"label\">{{ $t('research.patternLab.backtestPatterns.initialCapital') }}</p>\r\n          <base-input alternative\r\n                      type=\"text\"\r\n                      class=\"input\"\r\n                      style=\"\"\r\n                      v-model=\"strategy.initialCapital\"\r\n                      :placeholder=\"$t('research.patternLab.backtestPatterns.numberUSD')\">\r\n          </base-input>\r\n        </div>    \r\n\r\n        <!-- entry rules -->\r\n        <div style=\"clear:both;\">\r\n          <h4 slot=\"header\" class=\"card-title\">{{ $t('research.patternLab.entry') + ' ' + $t('research.patternLab.rules') }}</h4>        \r\n\r\n          <table>\r\n            <!-- direction -->\r\n            <tr>\r\n              <td>\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.direction') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-dropdown menu-classes=\"dropdown-black\" \r\n                              title-classes=\"btn btn-secondary\"\r\n                              :title=\"strategy.direction\">\r\n                  <ul style=\"list-style-type: none;\">\r\n                    <li v-for=\"dir in Object.values($t('research.patternLab.backtestPatterns.entryRules.directions')).filter(d => d !== strategy.direction)\">            \r\n                      <a class=\"dropdown-item\" \r\n                        @click=\"strategy.direction = dir\" \r\n                        href=\"#\">\r\n                        {{ dir }}\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </base-dropdown>\r\n              </td>\r\n            </tr>\r\n\r\n            <!-- trend filter -->\r\n            <tr :title=\"$t('research.patternLab.backtestPatterns.entryRules.trendFilterTip')\">\r\n              <td style=\"width: 46%\">\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.trendFilter') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-checkbox v-model=\"strategy.trendFilter\" style=\"margin-top: -20px; margin-bottom: 10px; text-align: center;\" />\r\n              </td>\r\n            </tr>\r\n\r\n            <!-- moving average -->\r\n            <tr v-if=\"strategy.trendFilter\" :title=\"$t('research.patternLab.backtestPatterns.entryRules.movingAverageTip')\">\r\n              <td>\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.ma_filter_period') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-input alternative\r\n                            type=\"text\"\r\n                            v-model=\"strategy.ma_filter_period\"\r\n                            :placeholder=\"$t('research.patternLab.backtestPatterns.numberUSD')\">\r\n                </base-input>\r\n              </td>\r\n            </tr>\r\n            \r\n            <!-- risk (fix-amount) -->\r\n            <tr>\r\n              <td>\r\n                <p>{{ $t('research.patternLab.backtestPatterns.entryRules.fixed_amount') }}</p>\r\n              </td>\r\n              <td>\r\n                <base-input alternative\r\n                        type=\"text\"\r\n                        v-model=\"strategy.fixed_amount\"\r\n                        :placeholder=\"$t('research.patternLab.backtestPatterns.numberUSD')\">\r\n                </base-input>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n          \r\n        </div>\r\n\r\n        <!-- exit rules -->\r\n        <div>\r\n          <h4 slot=\"header\" class=\"card-title\">{{ $t('research.patternLab.exit') + ' ' + $t('research.patternLab.rules') }}</h4>\r\n\r\n          <!-- analyze -->\r\n          <!-- <div :title=\"$t('research.patternLab.backtestPatterns.exitRules.analyzeTip')\">\r\n            <p class=\"label\" style=\"width: 34%\">{{ $t('research.patternLab.backtestPatterns.exitRules.analyze') }}</p>\r\n            <base-input alternative\r\n                        type=\"text\"\r\n                        class=\"input\"\r\n                        style=\"width: 40%\"\r\n                        v-model=\"strategy.analyze\"\r\n                        :placeholder=\"$t('research.patternLab.backtestPatterns.exitRules.numberBars')\">\r\n            </base-input>\r\n          </div> -->\r\n\r\n          <table>\r\n            <!-- profit target -->\r\n            <tr>\r\n              <td colspan=\"2\">\r\n                <p class=\"label\">{{ $t('research.patternLab.backtestPatterns.exitRules.profit_take') }}</p>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <base-input alternative\r\n                          type=\"text\"                        \r\n                          v-model=\"strategy.profit_take.value\"\r\n                          :placeholder=\"$t('number')\">\r\n                </base-input>\r\n              </td>\r\n              <td>\r\n                <base-dropdown menu-classes=\"dropdown-black\" \r\n                            title-classes=\"btn btn-secondary\"\r\n                            :title=\"strategy.profit_take.unit\">\r\n                  <ul style=\"list-style-type: none;\">\r\n                    <li v-for=\"unit in $t('research.patternLab.units').filter(u => u !== strategy.profit_take.unit)\">\r\n                      <a class=\"dropdown-item\" \r\n                        @click=\"strategy.profit_take.unit = unit\" \r\n                        href=\"#\">\r\n                        {{ unit }}\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </base-dropdown>\r\n              </td>\r\n            </tr>\r\n\r\n            <!-- stop loss -->\r\n            <tr>\r\n              <td colspan=\"2\">\r\n                <p class=\"label\">{{ $t('research.patternLab.backtestPatterns.exitRules.stoploss') }}</p>\r\n              </td>\r\n\r\n            </tr>\r\n            <tr>\r\n              <td>\r\n                <base-input alternative\r\n                          type=\"text\"\r\n                          v-model=\"strategy.stoploss.value\"\r\n                          :placeholder=\"$t('number')\">\r\n                </base-input>\r\n              </td>\r\n              <td>\r\n                <base-dropdown menu-classes=\"dropdown-black\" \r\n                            title-classes=\"btn btn-secondary\"\r\n                            :title=\"strategy.stoploss.unit\">\r\n                  <ul style=\"list-style-type: none;\">\r\n                    <li v-for=\"unit in $t('research.patternLab.units').filter(u => u !== strategy.stoploss.unit)\">\r\n                      <a class=\"dropdown-item\" \r\n                        @click=\"strategy.stoploss.unit = unit\" \r\n                        href=\"#\">\r\n                        {{ unit }}\r\n                      </a>\r\n                    </li>\r\n                  </ul>\r\n                </base-dropdown>\r\n              </td>\r\n            </tr>\r\n          </table>\r\n\r\n        </div>\r\n\r\n        <!-- Run strategy button -->\r\n        <base-button native-type=\"submit\" type=\"secondary\" @click=\"runStrategyClick\" style=\"width: 100%\">{{ $t('research.patternLab.backtestPatterns.runStrategy') }}</base-button>\r\n\r\n      </card>\r\n    </div>\r\n    \r\n    <!-- performance results  -->\r\n    <card class=\"col-xl-8 col-md-12  container \" style=\"margin-right: 0px\" :key=\"cardKey\">\r\n      <h4 slot=\"header\" class=\"card-title\" style=\"float: left\">{{ $t('research.patternLab.backtestPatterns.performanceResults.title') }}</h4>\r\n\r\n      <top-navbar />\r\n      <DualRingLoader v-if=\"loading\" :color=\"'#54f1d2'\" :class=\"[loading ? dataClass : noDataClass, loaderClass]\"/>\r\n      <dashboard-content @click.native=\"toggleSidebar\" style=\"margin-top: 15px\" />\r\n    </card>\r\n\r\n  </div>\r\n</template>\r\n<script>\r\n  import AssetsPatternsPicker from '@/custom/components/AssetsPatternsPicker'\r\n  import constants from '@/custom/assets/js/constants'\r\n  import helper from '@/custom/assets/js/helper';\r\n  import i18n from \"@/i18n\"\r\n  \r\n  import TopNavbar from \"@/custom/layout/application/patternLab/performanceResults/TopNavbar.vue\";\r\n  import DashboardContent from \"@/custom/layout/application/patternLab/Content.vue\";\r\n  import MobileMenu from \"@/layout/dashboard/MobileMenu\";\r\n  import DualRingLoader from '@bit/joshk.vue-spinners-css.dual-ring-loader';\r\n\r\n  \r\n  const defaultStrategy = {\r\n    initialCapital: null,\r\n\r\n    // entry rules\r\n    trendFilter: false,\r\n    ma_filter_period: null,\r\n    fixed_amount: null,\r\n    \r\n    // exit rules\r\n    analyze: null,\r\n    profit_take: {\r\n      value: null,\r\n      unit: constants.defaultUnit\r\n    },\r\n    stoploss: {\r\n      value: null,\r\n      unit: constants.defaultUnit\r\n    }\r\n  }\r\n  \r\n  export default {\r\n    components: {\r\n      AssetsPatternsPicker,\r\n      TopNavbar,\r\n      DashboardContent,\r\n      MobileMenu,\r\n      DualRingLoader\r\n    },\r\n\r\n    data() {\r\n      return {\r\n        errorTitle: ' (' + this.$t('research.patternLab.backtestPatterns.title') + ').',\r\n        columns: this.$t(constants.translationKeys.patterns + '.columns'),\r\n\r\n        strategy: {\r\n          ...defaultStrategy,\r\n          direction: Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions'))[0]\r\n        },\r\n        loading: false,\r\n        cardKey: 0,\r\n\r\n        // css classes\r\n        dataClass: 'data',      \r\n        noDataClass: 'noData',\r\n        loaderClass: 'loader',\r\n      }\r\n    },\r\n    \r\n    methods: {\r\n      initData() {\r\n        let data = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n        if (data) {\r\n          this.loading = data.loading ? data.loading : false\r\n          if (this.loading) {\r\n            this.setCheckBacktestsInterval()\r\n          }\r\n\r\n          if (data.strategy) {\r\n            this.strategy = data.strategy\r\n            this.strategy.direction = Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions'))[data.strategy.direction]\r\n          } else {\r\n            this.strategy = {\r\n              ...defaultStrategy,\r\n              direction: Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions'))[0]\r\n            }            \r\n          }\r\n        }\r\n      },\r\n\r\n      setCheckBacktestsInterval() {\r\n        let interval = setInterval(() => { \r\n          this.checkBacktests(interval)\r\n        }, constants.intervals.backtestsDone )        \r\n      },\r\n      checkBacktests(interval) {\r\n        let backtestsDone = true\r\n        let noResp = true\r\n\r\n        this.$http\r\n        .get(constants.urls.patternLab.backtestPatterns.status)\r\n        .then(response => {\r\n          response.data.forEach(bt => {\r\n            noResp = false\r\n            if (!bt.done) {\r\n              backtestsDone = false\r\n            }\r\n          })\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n          }\r\n        })\r\n        .finally(() => {\r\n          if (backtestsDone && !noResp) {\r\n              let bpData = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n              if (bpData) {\r\n                // set bt id and name\r\n                let bts = helper.getStoredBacktests(bpData)\r\n\r\n                this.$http\r\n                .get(constants.urls.patternLab.backtestPatterns.results)\r\n                .then(response => {\r\n                  bts.forEach(bt => {   // we have ids so change backtests names to 'bt_name (bt_id)' form\r\n                    bt.set('btId', response.data.filter(datum => datum.ticker === bt.get('assetId') && datum.pattern === bt.get('patternId'))[0].id)\r\n                    bt.set(this.columns[0].toLowerCase(), `${bt.get(this.columns[0].toLowerCase()) && !this.isDefaultPrName(bt.get(this.columns[0].toLowerCase())) \r\n                                                        ? bt.get(this.columns[0].toLowerCase()).split(' (')[0] \r\n                                                        : helper.getDefaultPrName(bt.get('btId'))} (${bt.get('btId')})`)    // Name\r\n                  })\r\n\r\n                  helper.updateStoreBacktests(this.$store, 'backtests', bts, constants.storeKeys.backtestPatterns)\r\n                  helper.updateStore(this.$store, 'allowSave', true, constants.storeKeys.backtestPatterns)\r\n                })\r\n                .catch(error => {\r\n                  console.log(error);\r\n\r\n                  if (error.message === constants.strings.networkError) {\r\n                    helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n                  }\r\n                })\r\n                .finally(() => {\r\n                  this.loading = false\r\n                  clearInterval(interval)\r\n                  this.cardKey++\r\n                })\r\n              }\r\n          }\r\n        })\r\n      },\r\n      isDefaultPrName(name) {\r\n        let nameSplitted = name.split('_')\r\n        if (nameSplitted.length < 2) {\r\n          return false\r\n        }\r\n        let splitted = nameSplitted[1].split(' (')\r\n        if (splitted.length < 2) {\r\n          return false\r\n        }\r\n        return splitted[0] === splitted[1].split(')')[0]\r\n      },\r\n\r\n      // methods from AssetsPatternsPicker emits\r\n      addPattern() {\r\n        if (!this.strategy.initialCapital) {\r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.noInitialCapital') + this.errorTitle\r\n                      })\r\n          return false\r\n        }\r\n\r\n        if (this.loading) {\r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.loading') + this.errorTitle\r\n                      })\r\n          return false\r\n        }\r\n\r\n        let data = helper.getAssetsPatternsPickerData(this.$store)\r\n        if (!data || !data.checkedPatterns.length) {   \r\n          return false\r\n        }\r\n\r\n        this.setBacktestsTable(true)\r\n\r\n        helper.updateStore(this.$store, 'savedBacktestsIDs', [], constants.storeKeys.backtestPatterns)\r\n        helper.updateStore(this.$store, 'unsavedBacktestsIDs', [], constants.storeKeys.backtestPatterns)\r\n        helper.updateStore(this.$store, 'allowSave', false, constants.storeKeys.backtestPatterns)\r\n\r\n        this.cardKey++\r\n\r\n        return true\r\n      },\r\n\r\n      runStrategyClick() {\r\n        let data = helper.getAssetsPatternsPickerData(this.$store)\r\n        if (!data || !data.checkedAssets.length) {   \r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.addNoAsset') + this.errorTitle\r\n                      })\r\n          return\r\n        }\r\n        \r\n        if (this.loading) {\r\n          this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.loading') + this.errorTitle\r\n                      })\r\n          return \r\n        }\r\n\r\n        if (data && !data.checkedPatterns.length) {\r\n          this.$notify({\r\n              type: 'warning', \r\n              message: this.$t('notifications.addNoPattern') + this.errorTitle\r\n          })  \r\n          return\r\n        } \r\n\r\n        let canRun = true\r\n        let btsData = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n        if (!btsData || (btsData && (btsData.backtests === undefined || btsData.backtests === []))) {\r\n          canRun = this.addPattern()\r\n        } \r\n\r\n        if (canRun) {        \r\n          this.setBacktestsTable()\r\n          this.cardKey++\r\n          this.runBacktests()     \r\n        }\r\n      },\r\n\r\n      setBacktestsTable(createNew=false) {\r\n        let assetsPatterns = helper.getAssetsPatternsPickerData(this.$store)\r\n        let bpData = this.$store.getItem(constants.storeKeys.backtestPatterns)\r\n        let oldTableData = []\r\n        if (bpData) {\r\n            oldTableData = helper.getStoredBacktests(bpData)\r\n        }\r\n        let newTableData = oldTableData\r\n\r\n        if (createNew) {\r\n          if (assetsPatterns) {\r\n            // create new rows\r\n            newTableData = []\r\n\r\n            assetsPatterns.checkedAssets.forEach(asset => {\r\n                assetsPatterns.checkedPatterns.forEach(pattern => {\r\n                    let row = new Map()     // order of properties is guaranteed so we can store only (language independent) values\r\n                    let clNr = 0\r\n\r\n                    row.set('btId', -1)\r\n                    row.set('assetId', asset.id)\r\n                    row.set('patternId', pattern.id)\r\n                    row.set(this.columns[clNr++].toLowerCase(), null)    // Name\r\n                    row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.range && assetsPatterns.range.from \r\n                                                                ? helper.formatDate(helper.formatDateOnly(assetsPatterns.range.from))\r\n                                                                : null)    // From\r\n                    row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.range && assetsPatterns.range.to\r\n                                                                ? helper.formatDate(helper.formatDateOnly(assetsPatterns.range.to))\r\n                                                                : null)    // To\r\n                    row.set(this.columns[clNr++].toLowerCase(), assetsPatterns.timeframe)    // Time frame                    \r\n                    row.set(this.columns[clNr++].toLowerCase(), asset.symbol)    // Asset                    \r\n                    row.set(this.columns[clNr++].toLowerCase(), pattern.name)    // Pattern\r\n\r\n                    if (this.strategy) {   \r\n                        this.updateRow(row, clNr)                            \r\n                    }                                 \r\n\r\n                    newTableData.push(row)\r\n                })\r\n            })\r\n          }\r\n        } else {\r\n            newTableData.forEach(row => {\r\n                let clNr = 4    // starting from Asset column (for the if)\r\n\r\n                if (assetsPatterns.range && !assetsPatterns.range.to) {\r\n                    // set null To dates to today\r\n                    row.set(this.columns[clNr-2].toLowerCase(), helper.formatDate(new Date())) // To\r\n                }\r\n            })\r\n        }\r\n\r\n        helper.updateStoreBacktests(this.$store, 'backtests', newTableData, constants.storeKeys.backtestPatterns) \r\n      },\r\n      updateRow(row, clNr) {\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.initialCapital ? `${this.strategy.initialCapital} ${constants.defaultUnit}` : null)    // Initial capital\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.analyze ? `${this.strategy.analyze} ${helper.pluralize(this.strategy.analyze, constants.translationKeys.patterns + '.bar')}` : null)    // Analyze\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.profit_take.value ? `${this.strategy.profit_take.value} ${this.strategy.profit_take.unit}` : null)    // Profit Target\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.stoploss.value ? `${this.strategy.stoploss.value} ${this.strategy.stoploss.unit}` : null)    // Stop Loss\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.trendFilter && this.strategy.ma_filter_period ? `${this.strategy.ma_filter_period} ${constants.defaultUnit}` : null)    // Trend filter (moving average)\r\n        row.set(this.columns[clNr++].toLowerCase(), this.strategy.direction)    // Direction\r\n        row.set('fixed_amount', this.strategy.fixed_amount)    // Risk\r\n      },\r\n\r\n      runBacktests() { \r\n        this.loading = true\r\n        let backtestsAll = helper.getStoredBacktests(this.$store.getItem(constants.storeKeys.backtestPatterns))\r\n\r\n        // run all backtests showed in Patterns table\r\n        let backtests2Run = []\r\n        backtestsAll.forEach(bt => backtests2Run.push(helper.mapStrategyFromRow(bt)))\r\n\r\n        this.$http\r\n        .post(constants.urls.patternLab.backtestPatterns.results, backtests2Run)\r\n        .then(_ => this.setCheckBacktestsInterval())\r\n        .catch(error => {\r\n          this.loading = false\r\n          console.log(error);\r\n\r\n          if (error.message === constants.strings.networkError) {\r\n            helper.notifyAudio(this, document.getElementById('connectionLost'), 'danger', this.errorTitle)\r\n          } else {\r\n            this.$notify({\r\n                          type: 'warning', \r\n                          message: this.$t('notifications.couldntRunBacktests') + this.errorTitle\r\n                        })\r\n          }\r\n        })        \r\n      },\r\n\r\n      toggleSidebar() {\r\n        if (this.$sidebar.showSidebar) {\r\n          this.$sidebar.displaySidebar(false);\r\n        }\r\n      }\r\n    },\r\n\r\n    mounted() {\r\n      this.initData()     \r\n      this.cardKey++\r\n    },\r\n\r\n    watch: {\r\n      loading(val) {\r\n        helper.updateStore(this.$store, 'loading', val, constants.storeKeys.backtestPatterns) \r\n      },\r\n      strategy: {\r\n        handler(val){\r\n          let val2store = JSON.parse(JSON.stringify(val))\r\n          val2store.direction = Object.values(this.$t('research.patternLab.backtestPatterns.entryRules.directions')).indexOf(val.direction)\r\n          helper.updateStore(this.$store, 'strategy', val2store, constants.storeKeys.backtestPatterns) \r\n        },\r\n        deep: true\r\n      }\r\n    }\r\n  }  \r\n</script>\r\n<style>\r\n.label {\r\n  float: left;\r\n  width: 40%;\r\n  padding-top: 5px;\r\n}\r\n\r\n.input {\r\n  float: left;\r\n  width: 60%;\r\n}\r\n\r\n.loader {\r\n  width: 80px; \r\n  height: 80px;  \r\n  position: absolute; \r\n}\r\n\r\n.loader.noData {\r\n  top: 20%; \r\n  left: 40%;    \r\n}\r\n\r\n.loader.data {\r\n  top: 40%; \r\n  left: 42.5%;\r\n}\r\n</style>"]}]}